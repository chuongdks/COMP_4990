PostId,Title,Body,Tags,Comments,Answers
90178,Make a div fill the remaining screen space,"I am currently working on a web application, where I want the content to fill the entire screen. I have a header `div` and a content `div`. At the moment I am using a table for the layout like so:

CSS:

    #page {
      height: 100%;
    }
    #tdcontent {
      height: 100%;
    }

HTML:

    <table id=""page"">
      <tr><td id=""tdheader"">
        <div id=""header"">...</div>
      </td></tr>
      <tr><td id=""tdcontent>
        <div id=""content"">...</div>
      </td>
    </table>

Which works how I like. The table remains at 100%, and the `tdcontent` element is always less than 100%. Is there a way to achieve the same effect without using the `table`?",<table><css><html>,"['For anyone stumbling here in the future, you can get the desired table layout in most browsers, without the table mark-up, by using `display:table` and related properties, see [this answer](http://stackoverflow.com/a/21225247/3128209) to a very similar question.', ""@Mr. Alien's answer is simple and useful, check it out [http://stackoverflow.com/a/23323175/188784](http://stackoverflow.com/a/23323175/188784)"", ""Actually, what you describe does not work, even with tables: if the content takes more vertical space than the screen height, the table cell and the whole table will expand beyond the screen bottom. Your content's overflow:auto will not make a scrollbar appear.""]","['<h3>2015 update: the flexbox approach</h3>\n\n<p>There are two other answers briefly mentioning <a href=""https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes"" rel=""noreferrer"">flexbox</a>; however, that was more than two years ago, and they don\'t provide any examples. The specification for flexbox has definitely settled now.</p>\n\n<blockquote>\n  <p>Note: Though CSS Flexible Boxes Layout specification is at the Candidate Recommendation stage, not all browsers have implemented it. WebKit implementation must be prefixed with -webkit-; Internet Explorer implements an old version of the spec, prefixed with -ms-; Opera 12.10 implements the latest version of the spec, unprefixed. See the compatibility table on each property for an up-to-date compatibility status.</p>\n  \n  <p>(taken from <a href=""https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes"" rel=""noreferrer"">https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes</a>)</p>\n</blockquote>\n\n<p>All major browsers and IE11+ support Flexbox. For IE 10 or older, you can use the FlexieJS shim.</p>\n\n<p>To check current support you can also see here:\n<a href=""http://caniuse.com/#feat=flexbox"" rel=""noreferrer"">http://caniuse.com/#feat=flexbox</a></p>\n\n<h3>Working example</h3>\n\n<p>With flexbox you can easily switch between any of your rows or columns either having fixed dimensions, content-sized dimensions or remaining-space dimensions. In my example I have set the header to snap to its content (as per the OPs question), I\'ve added a footer to show how to add a fixed-height region and then set the content area to fill up the remaining space.</p>\n\n<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""false"">\r\n<div class=""snippet-code"">\r\n<pre class=""snippet-code-css lang-css prettyprint-override""><code>html,\r\nbody {\r\n  height: 100%;\r\n  margin: 0;\r\n}\r\n\r\n.box {\r\n  display: flex;\r\n  flex-flow: column;\r\n  height: 100%;\r\n}\r\n\r\n.box .row {\r\n  border: 1px dotted grey;\r\n}\r\n\r\n.box .row.header {\r\n  flex: 0 1 auto;\r\n  /* The above is shorthand for:\r\n  flex-grow: 0,\r\n  flex-shrink: 1,\r\n  flex-basis: auto\r\n  */\r\n}\r\n\r\n.box .row.content {\r\n  flex: 1 1 auto;\r\n}\r\n\r\n.box .row.footer {\r\n  flex: 0 1 40px;\r\n}</code></pre>\r\n<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!-- Obviously, you could use HTML5 tags like `header`, `footer` and `section` --&gt;\r\n\r\n&lt;div class=""box""&gt;\r\n  &lt;div class=""row header""&gt;\r\n    &lt;p&gt;&lt;b&gt;header&lt;/b&gt;\r\n      &lt;br /&gt;\r\n      &lt;br /&gt;(sized to content)&lt;/p&gt;\r\n  &lt;/div&gt;\r\n  &lt;div class=""row content""&gt;\r\n    &lt;p&gt;\r\n      &lt;b&gt;content&lt;/b&gt;\r\n      (fills remaining space)\r\n    &lt;/p&gt;\r\n  &lt;/div&gt;\r\n  &lt;div class=""row footer""&gt;\r\n    &lt;p&gt;&lt;b&gt;footer&lt;/b&gt; (fixed height)&lt;/p&gt;\r\n  &lt;/div&gt;\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>In the CSS above, the <a href=""https://developer.mozilla.org/en/CSS/flex"" rel=""noreferrer"">flex</a> property shorthands the <a href=""https://developer.mozilla.org/en/CSS/flex-grow"" rel=""noreferrer"">flex-grow</a>, <a href=""https://developer.mozilla.org/en/CSS/flex-shrink"" rel=""noreferrer"">flex-shrink</a>, and <a href=""https://developer.mozilla.org/en/CSS/flex-basis"" rel=""noreferrer"">flex-basis</a> properties to establish the flexibility of the flex items. Mozilla has a <a href=""https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes"" rel=""noreferrer"">good introduction to the flexible boxes model</a>.</p>\n', ""<p>There really isn't a sound, cross-browser way to do this in CSS.  Assuming your layout has complexities, you need to use JavaScript to set the element's height.  The essence of what you need to do is:</p>\n\n<pre><code>Element Height = Viewport height - element.offset.top - desired bottom margin\n</code></pre>\n\n<p>Once you can get this value and set the element's height, you need to attach event handlers to both the window onload and onresize so that you can fire your resize function.</p>\n\n<p>Also, assuming your content could be larger than the viewport, you will need to set overflow-y to scroll.</p>\n"", '<p>The original post is more than 3 years ago. I guess many people who come to this post like me are looking for an app-like layout solution, say a somehow fixed header, footer, and full height content taking up the rest screen. If so, this post may help, it works on IE7+, etc.</p>\n\n<p><a href=""http://blog.stevensanderson.com/2011/10/05/full-height-app-layouts-a-css-trick-to-make-it-easier/"" rel=""noreferrer"">http://blog.stevensanderson.com/2011/10/05/full-height-app-layouts-a-css-trick-to-make-it-easier/</a></p>\n\n<p>And here are some snippets from that post:</p>\n\n<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""false"">\r\n<div class=""snippet-code"">\r\n<pre class=""snippet-code-css lang-css prettyprint-override""><code>@media screen { \r\n  \r\n  /* start of screen rules. */ \r\n  \r\n  /* Generic pane rules */\r\n  body { margin: 0 }\r\n  .row, .col { overflow: hidden; position: absolute; }\r\n  .row { left: 0; right: 0; }\r\n  .col { top: 0; bottom: 0; }\r\n  .scroll-x { overflow-x: auto; }\r\n  .scroll-y { overflow-y: auto; }\r\n\r\n  .header.row { height: 75px; top: 0; }\r\n  .body.row { top: 75px; bottom: 50px; }\r\n  .footer.row { height: 50px; bottom: 0; }\r\n  \r\n  /* end of screen rules. */ \r\n}</code></pre>\r\n<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div class=""header row"" style=""background:yellow;""&gt;\r\n    &lt;h2&gt;My header&lt;/h2&gt;\r\n&lt;/div&gt; \r\n&lt;div class=""body row scroll-y"" style=""background:lightblue;""&gt;\r\n    &lt;p&gt;The body&lt;/p&gt;\r\n&lt;/div&gt; \r\n&lt;div class=""footer row"" style=""background:#e9e9e9;""&gt;\r\n    My footer\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n']"
492994,Compare 2 dates with JavaScript,"can some one suggest a way to compare values of 2 dates greater then, less then and not in the passed using javascript. They values will be coming from text boxes

Thanks",<date><compare>,"[""no need to use momentjs to compare 2 dates. Just use pure javascript's Date object. Check main answer for more details."", 'When it comes to DateTime and manipulation in JS, I look no further than [momentjs](http://momentjs.com/) :)', 'For those like me who may have come along later, moment.js is now in ""maintenance mode,"" *i.e.* no longer being actively developed.']","['<p>The <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"" rel=""noreferrer"">Date object</a> will do what you want - construct one for each date, then compare them using the <code>&gt;</code>, <code>&lt;</code>, <code>&lt;=</code> or <code>&gt;=</code>.</p>\n<p>The <code>==</code>, <code>!=</code>, <code>===</code>, and <code>!==</code> operators require you to use <code>date.getTime()</code> as in</p>\n<pre><code>var d1 = new Date();\nvar d2 = new Date(d1);\nvar same = d1.getTime() === d2.getTime();\nvar notSame = d1.getTime() !== d2.getTime();\n</code></pre>\n<p>to be clear just checking for equality directly with the date objects won\'t work</p>\n<pre><code>var d1 = new Date();\nvar d2 = new Date(d1);\n\nconsole.log(d1 == d2);   // prints false (wrong!) \nconsole.log(d1 === d2);  // prints false (wrong!)\nconsole.log(d1 != d2);   // prints true  (wrong!)\nconsole.log(d1 !== d2);  // prints true  (wrong!)\nconsole.log(d1.getTime() === d2.getTime()); // prints true (correct)\n</code></pre>\n<p>I suggest you use drop-downs or some similar constrained form of date entry rather than text boxes, though, lest you find yourself in input validation hell.</p>\n<hr />\n<p>For the curious, <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime"" rel=""noreferrer""><code>date.getTime()</code> documentation</a>:</p>\n<blockquote>\n<p>Returns the numeric value of the specified date as the number of milliseconds since January 1, 1970, 00:00:00 UTC. (Negative values are returned for prior times.)</p>\n</blockquote>\n', '<p>Compare <code>&lt;</code> and <code>&gt;</code> just as usual, but anything involving <code>==</code> or <code>===</code> should use a <code>+</code> prefix. Like so:</p>\n<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\r\n<div class=""snippet-code"">\r\n<pre class=""snippet-code-js lang-js prettyprint-override""><code>const x = new Date(\'2013-05-23\');\nconst y = new Date(\'2013-05-23\');\n\n// less than, greater than is fine:\nconsole.log(\'x &lt; y\', x &lt; y); // false\nconsole.log(\'x &gt; y\', x &gt; y); // false\nconsole.log(\'x &lt;= y\', x &lt;= y); // true\nconsole.log(\'x &gt;= y\', x &gt;= y); // true\nconsole.log(\'x === y\', x === y); // false, oops!\n\n// anything involving \'==\' or \'===\' should use the \'+\' prefix\n// it will then compare the dates\' millisecond values\n\nconsole.log(\'+x === +y\', +x === +y); // true</code></pre>\r\n</div>\r\n</div>\r\n</p>\n', '<p>The easiest way to compare dates in javascript is to first convert it to a Date object and then compare these date-objects.</p>\n\n<p>Below you find an object with three functions:</p>\n\n<ul>\n<li><p><strong>dates.compare(a,b)</strong></p>\n\n<p>Returns a number:</p>\n\n<ul>\n<li>-1 if a &lt; b</li>\n<li>0 if a = b</li>\n<li>1 if a &gt; b</li>\n<li>NaN if a or b is an illegal date</li>\n</ul></li>\n<li><p><strong>dates.inRange</strong> (d,start,end)</p>\n\n<p>Returns a boolean or NaN:</p>\n\n<ul>\n<li><em>true</em> if <em>d</em> is between the <em>start</em> and <em>end</em> (inclusive)</li>\n<li><em>false</em> if <em>d</em> is before <em>start</em> or after <em>end</em>.</li>\n<li>NaN if one or more of the dates are illegal.</li>\n</ul></li>\n<li><p><strong>dates.convert</strong></p>\n\n<p>Used by the other functions to convert their input to a date object. The input can be</p>\n\n<ul>\n<li>a <strong>date</strong>-object : The input is returned as is.</li>\n<li>an <strong>array</strong>: Interpreted as [year,month,day]. <strong>NOTE</strong> month is 0-11.</li>\n<li>a <strong>number</strong> : Interpreted as number of milliseconds since 1 Jan 1970 (a timestamp) </li>\n<li>a <strong>string</strong> : Several different formats is supported, like ""YYYY/MM/DD"", ""MM/DD/YYYY"", ""Jan 31 2009"" etc.</li>\n<li>an <strong>object</strong>: Interpreted as an object with year, month and date attributes.  <strong>NOTE</strong> month is 0-11.</li>\n</ul></li>\n</ul>\n\n<p>.</p>\n\n<pre><code>// Source: http://stackoverflow.com/questions/497790\nvar dates = {\n    convert:function(d) {\n        // Converts the date in d to a date-object. The input can be:\n        //   a date object: returned without modification\n        //  an array      : Interpreted as [year,month,day]. NOTE: month is 0-11.\n        //   a number     : Interpreted as number of milliseconds\n        //                  since 1 Jan 1970 (a timestamp) \n        //   a string     : Any format supported by the javascript engine, like\n        //                  ""YYYY/MM/DD"", ""MM/DD/YYYY"", ""Jan 31 2009"" etc.\n        //  an object     : Interpreted as an object with year, month and date\n        //                  attributes.  **NOTE** month is 0-11.\n        return (\n            d.constructor === Date ? d :\n            d.constructor === Array ? new Date(d[0],d[1],d[2]) :\n            d.constructor === Number ? new Date(d) :\n            d.constructor === String ? new Date(d) :\n            typeof d === ""object"" ? new Date(d.year,d.month,d.date) :\n            NaN\n        );\n    },\n    compare:function(a,b) {\n        // Compare two dates (could be of any type supported by the convert\n        // function above) and returns:\n        //  -1 : if a &lt; b\n        //   0 : if a = b\n        //   1 : if a &gt; b\n        // NaN : if a or b is an illegal date\n        // NOTE: The code inside isFinite does an assignment (=).\n        return (\n            isFinite(a=this.convert(a).valueOf()) &amp;&amp;\n            isFinite(b=this.convert(b).valueOf()) ?\n            (a&gt;b)-(a&lt;b) :\n            NaN\n        );\n    },\n    inRange:function(d,start,end) {\n        // Checks if date in d is between dates in start and end.\n        // Returns a boolean or NaN:\n        //    true  : if d is between start and end (inclusive)\n        //    false : if d is before start or after end\n        //    NaN   : if one or more of the dates is illegal.\n        // NOTE: The code inside isFinite does an assignment (=).\n       return (\n            isFinite(d=this.convert(d).valueOf()) &amp;&amp;\n            isFinite(start=this.convert(start).valueOf()) &amp;&amp;\n            isFinite(end=this.convert(end).valueOf()) ?\n            start &lt;= d &amp;&amp; d &lt;= end :\n            NaN\n        );\n    }\n}\n</code></pre>\n']"
500504,"JavaScript ""For ...in"" with Arrays","I've been told not to use ""for...in"" with Arrays in JavaScript but never received a satisfactory reason as to why not. 

The question is: Why is using ""for ...in"" with array iteration such a bad idea?",<javascript>,"['I saw the recent question where someone said that to you, but they only meant for Arrays. It is considered bad practice for iterating through arrays but not necessarily for iterating through members of an object.', 'Lots of answers with ""for"" loops such as \'for (var i=0; i<hColl.length; i++) {}\' compare to \'var i=hColl.length; while (i--) {}\' which, when it is possible to use the latter form it is substantially faster.  I know this is tangential but thought I would add this bit.', 'You can also be clever.\n`for(var i = 0, l = myArray.length; i < l; ++i) ...` is the fastest and best you can get with forward iteration.']","['<p>The reason is that one construct:</p>\n<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\r\n<div class=""snippet-code"">\r\n<pre class=""snippet-code-js lang-js prettyprint-override""><code>var a = []; // Create a new empty array.\na[5] = 5;   // Perfectly legal JavaScript that resizes the array.\n\nfor (var i = 0; i &lt; a.length; i++) {\n    // Iterate over numeric indexes from 0 to 5, as everyone expects.\n    console.log(a[i]);\n}\n\n/* Will display:\n   undefined\n   undefined\n   undefined\n   undefined\n   undefined\n   5\n*/</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>can sometimes be totally different from the other:</p>\n<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\r\n<div class=""snippet-code"">\r\n<pre class=""snippet-code-js lang-js prettyprint-override""><code>var a = [];\na[5] = 5;\nfor (var x in a) {\n    // Shows only the explicitly set index of ""5"", and ignores 0-4\n    console.log(x);\n}\n\n/* Will display:\n   5\n*/</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>Also consider that <a href=""http://en.wikipedia.org/wiki/JavaScript"" rel=""noreferrer"">JavaScript</a> libraries might do things like this, which will affect any array you create:</p>\n<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">\r\n<div class=""snippet-code"">\r\n<pre class=""snippet-code-js lang-js prettyprint-override""><code>// Somewhere deep in your JavaScript library...\nArray.prototype.foo = 1;\n\n// Now you have no idea what the below code will do.\nvar a = [1, 2, 3, 4, 5];\nfor (var x in a){\n    // Now foo is a part of EVERY array and \n    // will show up here as a value of \'x\'.\n    console.log(x);\n}\n\n/* Will display:\n   0\n   1\n   2\n   3\n   4\n   foo\n*/</code></pre>\r\n</div>\r\n</div>\r\n</p>\n', '<p>The <code>for-in</code> statement by itself is not a ""bad practice"", however it can be <em>mis-used</em>, for example, to <em>iterate</em> over arrays or array-like objects.</p>\n\n<p>The purpose of the <code>for-in</code> statement is to <em>enumerate</em> over object properties. This statement will go up in the prototype chain, also enumerating over <em>inherited</em> properties, a thing that <em>sometimes</em> is not desired.</p>\n\n<p>Also, the order of iteration is not guaranteed by the spec., meaning that if you want to ""iterate"" an array object, with this statement you cannot be sure that the properties (array indexes) will be visited in the numeric order.</p>\n\n<p>For example, in JScript (IE &lt;= 8), the order of enumeration even on Array objects is defined as the properties were created:</p>\n\n<pre><code>var array = [];\narray[2] = \'c\';\narray[1] = \'b\';\narray[0] = \'a\';\n\nfor (var p in array) {\n  //... p will be ""2"", ""1"" and ""0"" on IE\n}\n</code></pre>\n\n<p>Also, speaking about inherited properties, if you, for example, extend the <code>Array.prototype</code> object (like some libraries as MooTools do), that properties will be also enumerated:</p>\n\n<pre><code>Array.prototype.last = function () { return this[this.length-1]; };\n\nfor (var p in []) { // an empty array\n  // last will be enumerated\n}\n</code></pre>\n\n<p>As I said before to <em>iterate</em> over arrays or array-like objects, the best thing is to use a <em>sequential loop</em>, such as a plain-old <code>for</code>/<code>while</code> loop.</p>\n\n<p>When you want to enumerate only the <em>own properties</em> of an object (the ones that aren\'t inherited), you can use the <code>hasOwnProperty</code> method:</p>\n\n<pre><code>for (var prop in obj) {\n  if (obj.hasOwnProperty(prop)) {\n    // prop is not inherited\n  }\n}\n</code></pre>\n\n<p>And some people even recommend calling the method directly from <code>Object.prototype</code> to avoid having problems if somebody adds a property named <code>hasOwnProperty</code> to our object:</p>\n\n<pre><code>for (var prop in obj) {\n  if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n    // prop is not inherited\n  }\n}\n</code></pre>\n', ""<p>There are three reasons why you shouldn't use <code>for..in</code> to iterate over array elements:</p>\n\n<ul>\n<li><p><code>for..in</code> will loop over all own and inherited properties of the array object which aren't <code>DontEnum</code>; that means if someone adds properties to the specific array object (there are valid reasons for this - I've done so myself) or changed <code>Array.prototype</code> (which is considered bad practice in code which is supposed to work well with other scripts), these properties will be iterated over as well; inherited properties can be excluded by checking <code>hasOwnProperty()</code>, but that won't help you with properties set in the array object itself</p></li>\n<li><p><code>for..in</code> isn't guaranteed to preserve element ordering</p></li>\n<li><p>it's slow because you have to walk all properties of the array object and its whole prototype chain and will still only get the property's name, ie to get the value, an additional lookup will be required</p></li>\n</ul>\n""]"
1149703,Stacktrace to string in Java,Easiest way to convert the result of Throwable.getStackTrace() to a string that depicts the stacktrace?,<stack-trace><java><tostring>,"[""@StijndeWitt Those three lines of code almost certainly need factoring out of the place you've called them. Since you don't know where to put them, they'll go in your utility toolbox with all the other useful snippets. Bingo! you've just reinvented guava / commons-lang / whatever... only not so well. Import a sensible utilities library instead, and save reinventing the wheel. *The true sign of a novice is thinking you can do a better job than the library writers.*"", '@AndrewSpencer I don\'t understand why you guys try so hard to bash StijndeWitt for wanting to achieve this with some small snippet. There is really not much danger in writing a tiny utility method (I don\'t see it as ""SHEER ARROGANCE oh nooooo!! he thinks he\'s better than Apache!!""). There are tons of projects especially in non-Java JVM languages that really don\'t want to include Guava or Commons Lang just to log a stacktrace. I write Scala & Clojure libraries and certainly will not be making Apache Commons Lang a transitive dependency just for one method.', 'Just about every Java project should include Apache commons-lang. It includes many convenience methods implementing extremely common development needs.']","['<p>Use <a href=""https://docs.oracle.com/javase/8/docs/api/java/lang/Throwable.html#printStackTrace-java.io.PrintWriter-"" rel=""noreferrer""><code>Throwable.printStackTrace(PrintWriter pw)</code></a> to send the stack trace to an appropriate writer.</p>\n\n<pre><code>import java.io.StringWriter;\nimport java.io.PrintWriter;\n\n// ...\n\nStringWriter sw = new StringWriter();\nPrintWriter pw = new PrintWriter(sw);\ne.printStackTrace(pw);\nString sStackTrace = sw.toString(); // stack trace as a string\nSystem.out.println(sStackTrace);\n</code></pre>\n', '<p>One can use the following method to convert an <code>Exception</code> stack trace to <code>String</code>. This class is available in <em>Apache commons-lang which is most common dependent library with many popular open sources</em></p>\n\n<p><a href=""http://commons.apache.org/proper/commons-lang/javadocs/api-2.6/org/apache/commons/lang/exception/ExceptionUtils.html#getStackTrace(java.lang.Throwable)"" rel=""noreferrer""><code>org.apache.commons.lang.exception.ExceptionUtils.getStackTrace(Throwable)</code></a></p>\n', '<p>This should work:   </p>\n\n<pre><code>StringWriter sw = new StringWriter();\ne.printStackTrace(new PrintWriter(sw));\nString exceptionAsString = sw.toString();\n</code></pre>\n']"
2709821,python 'self' explained,"What is the purpose of the 'self' word in python. I understand it refers to the specific object created from that class, but i cant see why it explicitly needs to be added to very function as a parameter. To illustrate, in ruby, i could do this:

    class myClass
        def myFunc(name)
            @name = name
        end
    end

Which i understand, quite easily, However in python i need to include self:

    class myClass:
        def myFunc(self, name):
            self.name = name

Can anyone talk me through this? its not something ive come across in my (admittedly limited) experience.
Any help would be appreciated.",<python><self><explain>,"['You may find interesting this essay ""Why explicit self has to stay"" by Guido van Rossum: http://neopythonic.blogspot.com/2008/10/why-explicit-self-has-to-stay.html', '""Which i understand, quite easily"" ---\n\nQuite subjective, don\'t you think? What makes `@name` more intuitive than `self.name`? The latter, IMO, is more intuitive.', ""That's the key difference between a function and a class method. A function is floating free, unencumbered. A class (instance) method has to be aware of it's parent (and parent properties) so you need to pass the method a reference to the parent class (as **self**). It's just one less implicit rule that you have to internalize before understanding OOP. Other languages choose syntactic sugar over semantic simplicity, python isn't other languages.""]","[""<p>The reason you need to use <code>self.</code> is because Python does not use special syntax to refer to instance attributes. Python decided to do methods in a way that makes the instance to which the method belongs be <em>passed</em> automatically, but not <em>received</em> automatically: the first parameter of methods is the instance the method is called on. That makes methods entirely the same as functions, and leaves the actual name to use up to you (although <code>self</code> is the convention, and people will generally frown at you when you use something else.) <code>self</code> is not special to the code, it's just another object.</p>\n<p>Python could have done something else to distinguish normal names from attributes -- special syntax like Ruby has, or requiring declarations like C++ and Java do, or perhaps something  yet more different -- but it didn't. Python's all for making things explicit, making it obvious what's what, and although it doesn't do it entirely everywhere, it does do it for instance attributes. That's why assigning to an instance attribute needs to know what instance to assign to, and that's why it needs <code>self.</code>.</p>\n"", ""<p>Let's say you have a class <code>ClassA</code> which contains a method <code>methodA</code> defined as:</p>\n<pre><code>class ClassA:\n    def methodA(self, arg1, arg2):\n        ... # do something\n</code></pre>\n<p>and <code>objectA</code> is an instance of this class.</p>\n<p>Now when <code>objectA.methodA(arg1, arg2)</code> is called, python internally converts it for you as:</p>\n<pre><code>ClassA.methodA(objectA, arg1, arg2)\n</code></pre>\n<p>The <code>self</code> variable refers to the object itself.</p>\n"", ""<p>Let’s take a simple vector class:</p>\n\n<pre><code>class Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n</code></pre>\n\n<p>We want to have a method which calculates the length. What would it look like if we wanted to define it inside the class?</p>\n\n<pre><code>    def length(self):\n        return math.sqrt(self.x ** 2 + self.y ** 2)\n</code></pre>\n\n<p>What should it look like when we were to define it as a global method/function?</p>\n\n<pre><code>def length_global(vector):\n    return math.sqrt(vector.x ** 2 + vector.y ** 2)\n</code></pre>\n\n<p>So the whole structure stays the same. How can me make use of this? If we assume for a moment that we hadn’t written a <code>length</code> method for our <code>Vector</code> class, we could do this:</p>\n\n<pre><code>Vector.length_new = length_global\nv = Vector(3, 4)\nprint(v.length_new()) # 5.0\n</code></pre>\n\n<p>This works because the first parameter of <code>length_global</code>, can be re-used as the <code>self</code> parameter in <code>length_new</code>. This would not be possible without an explicit <code>self</code>.</p>\n\n<hr>\n\n<p>Another way of understanding the need for the explicit <code>self</code> is to see where Python adds some syntactical sugar. When you keep in mind, that basically, a call like</p>\n\n<pre><code>v_instance.length()\n</code></pre>\n\n<p>is internally transformed to</p>\n\n<pre><code>Vector.length(v_instance)\n</code></pre>\n\n<p>it is easy to see where the <code>self</code> fits in. You don't actually write instance methods in Python; what you write is class methods which must take an instance as a first parameter. And therefore, you’ll have to place the instance parameter somewhere explicitly.</p>\n""]"
3106452,java servlet instantiation and session variables,"Out of curiosity and naivety:

Suppose, I have a webserver which holds numerous servlets. For information passing among those servlets I am getting the servlet context and setting session variables. Now, if 2 or more users send request to this server then what happens to the session variables? Will they all be common for all the users or they will be different for each user. If they are different, then how was the server able to differentiate between different users?

One more similar questions,
If there are n users accessing a particular servlet, then this servlet gets instantiated only the first time the first user accessed it or it gets instantiated for all the users separately?

Thanks,",<servlets>,"['When a TCP connection is established on a listening port, the server chooses a different port to the listening  port and the client sends subsequent traffic to that newly allocated number. Session variables are associated with this connection port.']","['<h2><code>ServletContext</code></h2>\n<p>When the servlet container (like <a href=""https://tomcat.apache.org"" rel=""noreferrer"">Apache Tomcat</a>) starts up, it will deploy and load all its web applications. When a web application is loaded, the servlet container creates an instance of <a href=""https://jakarta.ee/specifications/platform/10/apidocs/jakarta/servlet/servletcontext"" rel=""noreferrer""><code>ServletContext</code></a> once and keeps it in the server\'s memory. The web app\'s <code>web.xml</code> and all of included <code>web-fragment.xml</code> files is parsed, and each <code>&lt;servlet&gt;</code>, <code>&lt;filter&gt;</code> and <code>&lt;listener&gt;</code> found (or each class annotated with <code>@WebServlet</code>, <code>@WebFilter</code> and <code>@WebListener</code> respectively) will be instantiated once and be kept in the server\'s memory as well, registred via the <code>ServletContext</code>. For each instantiated filter, its <code>init()</code> method is invoked with an instance of <a href=""https://jakarta.ee/specifications/platform/10/apidocs/jakarta/servlet/filterconfig"" rel=""noreferrer""><code>FilterConfig</code></a> as argument which in turn contains the involved <code>ServletContext</code>.</p>\n<p>When a <code>Servlet</code> has a <code>&lt;servlet&gt;&lt;load-on-startup&gt;</code> or <code>@WebServlet(loadOnStartup)</code> value of <code>0</code> or greater, then its <code>init()</code> method is also invoked during startup. Those servlets are initialized in the same order specified by that value. If the same value is specified for more than one servlet, then each of those servlets is loaded in the same order as they appear in the <code>web.xml</code>, <code>web-fragment.xml</code>, or <code>@WebServlet</code> classloading. In the event the &quot;load-on-startup&quot; value is absent or negative, the <code>init()</code> method will be invoked whenever the <a href=""https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_message"" rel=""noreferrer"">HTTP request</a> hits that servlet for the very first time. There are two <code>init()</code> methods, one taking an instance of <a href=""https://jakarta.ee/specifications/platform/10/apidocs/jakarta/servlet/servletconfig"" rel=""noreferrer""><code>ServletConfig</code></a> as argument which in turn contains the involved <code>ServletContext</code>, and another which does not take any arguments but the <code>ServletContext</code> is available by inherited <code>getServletContext()</code> method.</p>\n<p>When the servlet container is finished with all of the above described initialization steps, then the <a href=""https://jakarta.ee/specifications/platform/10/apidocs/jakarta/servlet/servletcontextlistener#contextInitialized(jakarta.servlet.ServletContextEvent)"" rel=""noreferrer""><code>ServletContextListener#contextInitialized()</code></a> will be invoked with a <a href=""https://jakarta.ee/specifications/platform/10/apidocs/jakarta/servlet/servletcontextevent"" rel=""noreferrer""><code>ServletContextEvent</code></a> argument which in turn contains the involved <code>ServletContext</code>. This will allow the developer the opportunity to programmatically register yet another <code>Servlet</code>, <code>Filter</code> or <code>Listener</code>.</p>\n<p>When the servlet container shuts down, it unloads all web applications, invokes the <code>destroy()</code> method of all its initialized servlets and filters, and all <code>Servlet</code>, <code>Filter</code> and <code>Listener</code> instances registered via the <code>ServletContext</code> are trashed. Finally the <a href=""https://jakarta.ee/specifications/platform/10/apidocs/jakarta/servlet/servletcontextlistener#contextDestroyed(jakarta.servlet.ServletContextEvent)"" rel=""noreferrer""><code>ServletContextListener#contextDestroyed()</code></a> will be invoked and the <code>ServletContext</code> itself will be trashed.</p>\n<h2><code>HttpServletRequest</code> and <code>HttpServletResponse</code></h2>\n<p>The servlet container is attached to a web server that listens for HTTP requests on a certain port number (port 8080 is usually used during development and port 80 in production). When a client (e.g. user with a web browser, or <a href=""https://stackoverflow.com/questions/2793150/how-to-use-java-net-urlconnection-to-fire-and-handle-http-requests"">programmatically using <code>URLConnection</code></a>) sends an HTTP request, the servlet container creates new instances of <a href=""https://jakarta.ee/specifications/platform/10/apidocs/jakarta/servlet/http/httpservletrequest"" rel=""noreferrer""><code>HttpServletRequest</code></a> and <a href=""https://jakarta.ee/specifications/platform/10/apidocs/jakarta/servlet/http/httpservletresponse"" rel=""noreferrer""><code>HttpServletResponse</code></a> and passes them through any defined <code>Filter</code> in the chain and, eventually, the <code>Servlet</code> instance.</p>\n<p>In the case of <a href=""https://stackoverflow.com/tags/servlet-filters/info"">filters</a>, the <code>doFilter()</code> method is invoked. When the servlet container\'s code calls <code>chain.doFilter(request, response)</code>, the request and response continue on to the next filter, or hit the servlet if there are no remaining filters.</p>\n<p>In the case of <a href=""https://stackoverflow.com/tags/servlets/info"">servlets</a>, the <code>service()</code> method is invoked. By default, this method determines which one of the <code>doXxx()</code> methods to invoke based off of  <code>request.getMethod()</code>. If the determined method is absent from the servlet, then an HTTP 405 error is returned in the response.</p>\n<p>The request object provides access to all of the information about the HTTP request, such as its <a href=""https://en.wikipedia.org/wiki/URL"" rel=""noreferrer"">URL</a>, <a href=""https://en.wikipedia.org/wiki/List_of_HTTP_header_fields"" rel=""noreferrer"">headers</a>, <a href=""https://en.wikipedia.org/wiki/Query_string"" rel=""noreferrer"">query string</a> and body. The response object provides the ability to control and send the HTTP response the way you want by, for instance, allowing you to set the headers and the body (usually with generated HTML content from a JSP file). When the HTTP response is committed and finished, both the request and response objects are recycled and made available for reuse.</p>\n<h2><code>HttpSession</code></h2>\n<p>When a client visits the webapp for the first time and/or the <a href=""https://jakarta.ee/specifications/platform/10/apidocs/jakarta/servlet/http/httpsession"" rel=""noreferrer""><code>HttpSession</code></a> is obtained for the first time via <code>request.getSession()</code>, the servlet container creates a new <code>HttpSession</code> object, generates a long and unique ID (which you can get by <code>session.getId()</code>), and stores it in the server\'s memory. The servlet container also sets a <a href=""https://jakarta.ee/specifications/platform/10/apidocs/jakarta/servlet/http/cookie"" rel=""noreferrer""><code>Cookie</code></a> in the <code>Set-Cookie</code> header of the HTTP response with <code>JSESSIONID</code> as its name and the unique session ID as its value.</p>\n<p>As per the <a href=""http://www.faqs.org/rfcs/rfc2965.html"" rel=""noreferrer"">HTTP cookie specification</a> (a contract any decent web browser and web server must adhere to), the client (the web browser) is required to send this <a href=""https://en.wikipedia.org/wiki/HTTP_cookie"" rel=""noreferrer"">cookie</a> back in subsequent requests in the <code>Cookie</code> header for as long as the cookie is valid (i.e. the unique ID must refer to an unexpired session and the domain and path are correct). Using your browser\'s built-in HTTP traffic monitor, you can verify that the cookie is valid (press F12 in Chrome / Edge / Firefox 23+ / IE9+, and check the <em>Net/Network</em> tab). The servlet container will check the <code>Cookie</code> header of every incoming HTTP request for the presence of the cookie with the name <code>JSESSIONID</code> and use its value (the session ID) to get the associated <code>HttpSession</code> from server\'s memory.</p>\n<p>The <code>HttpSession</code> stays alive until it has been idle (i.e. not used in a request) for more than the timeout value specified in <code>&lt;session-timeout&gt;</code>, a setting in <code>web.xml</code>. The default timeout value depends on the servlet container and is usually 30 minutes. So, when the client doesn\'t visit the web app for longer than the time specified, the servlet container trashes the <a href=""https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#HTTP_session"" rel=""noreferrer"">session</a>. Every subsequent request, even with the cookie specified, will not have access to the same session anymore; the servlet container will create a new session.</p>\n<p>On the client side, the session cookie remains as long as the browser instance is running (normally). Unless the browser is configured to <a href=""https://stackoverflow.com/a/36421888/5405434"">restore the last browser session</a>, when the client closes the browser instance (all tabs/windows), the session is lost on the client\'s side. In a new browser instance, the cookie associated with the session wouldn\'t exist, so it would no longer be sent. This causes an entirely new <code>HttpSession</code> to be created, with an entirely new session cookie being used.</p>\n<h2>In a nutshell</h2>\n<ul>\n<li>The <code>ServletContext</code> lives for as long as the web app lives. It is shared among <em>all</em> requests in <em>all</em> sessions.</li>\n<li>The <code>HttpSession</code> lives for as long as the client is interacting with the web app with the same browser instance, and the session hasn\'t timed out at the server side. It is shared among <em>all</em> requests in the <em>same</em> session.</li>\n<li>The <code>HttpServletRequest</code> and <code>HttpServletResponse</code> live from the time the servlet receives an HTTP request from the client, until the complete response (the web page) has arrived. It is <em>not</em> shared elsewhere.</li>\n<li>All <code>Servlet</code>, <code>Filter</code> and <code>Listener</code> instances live as long as the web app lives. They are shared among <em>all</em> requests in <em>all</em> sessions.</li>\n<li>Any <code>attribute</code> that is defined in <code>ServletContext</code>, <code>HttpServletRequest</code> and <code>HttpSession</code> will live as long as the object in question lives. The object itself represents the &quot;scope&quot; in bean management frameworks such as JSF, CDI, Spring, etc. Those frameworks store their scoped beans as an <code>attribute</code> of its closest matching scope.</li>\n</ul>\n<h2>Thread Safety</h2>\n<p>That said, your major concern is possibly <a href=""https://en.wikipedia.org/wiki/Thread_safety"" rel=""noreferrer""><em>thread safety</em></a>. You should now know that servlets and filters are shared among all requests. That\'s the nice thing about Java, it\'s multithreaded and different threads (read: HTTP requests) can make use of the same instance. It would otherwise be too expensive to recreate, <code>init()</code> and <code>destroy()</code> them for every single request.</p>\n<p>You should also realize that you should <strong>never</strong> assign any request or session scoped data as an <em>instance</em> variable of a servlet or filter. It will be shared among all other requests in other sessions. That\'s <strong>not</strong> thread-safe! The below example illustrates this:</p>\n<pre><code>public class ExampleServlet extends HttpServlet {\n\n    private Object thisIsNOTThreadSafe;\n\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        Object thisIsThreadSafe;\n\n        thisIsNOTThreadSafe = request.getParameter(&quot;foo&quot;); // BAD!! Shared among all requests!\n        thisIsThreadSafe = request.getParameter(&quot;foo&quot;); // OK, this is thread safe.\n    } \n}\n</code></pre>\n<h3>See also:</h3>\n<ul>\n<li><a href=""https://stackoverflow.com/questions/2095397/what-is-the-difference-between-jsf-servlet-and-jsp"">What is the difference between JSF, Servlet and JSP?</a></li>\n<li><a href=""https://stackoverflow.com/questions/1700390/best-option-for-session-management-in-java"">Best option for Session management in Java</a></li>\n<li><a href=""https://stackoverflow.com/questions/4140448/difference-between-and-in-servlet-mapping-url-pattern"">Difference between / and /* in servlet mapping url pattern</a></li>\n<li><a href=""https://stackoverflow.com/questions/2349633/doget-and-dopost-in-servlets"">doGet and doPost in Servlets</a></li>\n<li><a href=""https://stackoverflow.com/questions/8011138/servlet-seems-to-handle-multiple-concurrent-requests-synchronously/"">Servlet seems to handle multiple concurrent browser requests synchronously</a></li>\n<li><a href=""https://stackoverflow.com/questions/9555842/why-servlets-are-not-thread-safe/"">Why Servlets are not thread Safe?</a></li>\n<li><a href=""https://stackoverflow.com/questions/35837285/different-ways-to-get-servlet-context/"">Different ways to get Servlet Context</a></li>\n</ul>\n', '<h2>Sessions</h2>\n\n<p><img src=""https://i.sstatic.net/ABDSX.png"" alt=""enter image description here"">\n<img src=""https://i.sstatic.net/IWAF3.png"" alt=""enter image description here""></p>\n\n<p>In short: the web server issues a unique identifier to <em>each visitor</em> on his <em>first</em> visit. The visitor must bring back that ID for him to be recognised next time around. This identifier also allows the server to properly segregate objects owned by one session against that of another.</p>\n\n<h2>Servlet Instantiation</h2>\n\n<p>If <strong>load-on-startup</strong> is <strong>false</strong>:</p>\n\n<p><img src=""https://i.sstatic.net/Jjvcb.png"" alt=""enter image description here"">\n<img src=""https://i.sstatic.net/7Bw3x.png"" alt=""enter image description here""></p>\n\n<p>If <strong>load-on-startup</strong> is <strong>true</strong>:</p>\n\n<p><img src=""https://i.sstatic.net/t33bd.png"" alt=""enter image description here"">\n<img src=""https://i.sstatic.net/e7BB7.png"" alt=""enter image description here""></p>\n\n<p>Once he\'s on the service mode and on the groove, the <em>same</em> servlet will work on the requests from all other clients. </p>\n\n<p><img src=""https://i.sstatic.net/gqoR4.png"" alt=""enter image description here""></p>\n\n<p>Why isn\'t it a good idea to have one instance per client? Think about this: Will you hire one pizza guy for every order that came? Do that and you\'d be out of business in no time.</p>\n\n<p>It comes with a small risk though. Remember: this single guy holds all the order information in his pocket: so if you\'re not cautious about <a href=""http://tutorials.jenkov.com/java-servlets/servlet-concurrency.html"" rel=""noreferrer"">thread safety on servlets</a>, he may end up giving the wrong order to a certain client.</p>\n', '<p>Session in Java servlets is the same as session in other languages such as PHP.  It is unique to the user.  The server can keep track of it in different ways such as cookies, url rewriting etc.  This <a href=""http://java.sun.com/products/servlet/2.2/javadoc/javax/servlet/http/HttpSession.html"" rel=""noreferrer"">Java doc</a> article explains it in the context of Java servlets and indicates that exactly how session is maintained is an implementation detail left to the designers of the server.  The specification only stipulates that it must be maintained as unique to a user across multiple connections to the server.  Check out <a href=""http://download.oracle.com/docs/cd/A97336_01/buslog.102/a83726/tecbkgn2.htm"" rel=""noreferrer"">this article from Oracle</a> for more information about both of your questions.</p>\n\n<p><strong>Edit</strong> There is an excellent tutorial <a href=""http://www.apl.jhu.edu/~hall/java/Servlet-Tutorial/Servlet-Tutorial-Session-Tracking.html"" rel=""noreferrer"">here</a> on how to work with session inside of servlets. And <a href=""http://docs.oracle.com/javaee/5/tutorial/doc/bnafd.html"" rel=""noreferrer"">here</a> is a chapter from Sun about Java Servlets, what they are and how to use them.  Between those two articles, you should be able to answer all of your questions.  </p>\n']"
3289601,nulls object in Python?,How do I refer to the null object in Python?,<python><null>,[],"['<p>In Python, the \'null\' object is the singleton <code>None</code>.</p>\n<p>To check if something is <code>None</code>, use the <a href=""https://docs.python.org/3/reference/expressions.html#is"" rel=""noreferrer""><code>is</code></a> identity operator:</p>\n<pre><code>if foo is None:\n    ...\n</code></pre>\n', ""<h1><code>None</code>, Python's null?</h1>\n<p>There's no <code>null</code> in Python; instead there's <code>None</code>. As stated already, the most accurate way to test that something has been given <code>None</code> as a value is to use the <code>is</code> identity operator, which tests that two variables refer to the same object.</p>\n<pre><code>&gt;&gt;&gt; foo is None\nTrue\n&gt;&gt;&gt; foo = 'bar'\n&gt;&gt;&gt; foo is None\nFalse\n</code></pre>\n<h1>The basics</h1>\n<h2>There is and can only be one <code>None</code></h2>\n<p><code>None</code> is the sole instance of the class <code>NoneType</code> and any further attempts at instantiating that class will return the same object, which makes <code>None</code> a singleton. Newcomers to Python often see error messages that mention <code>NoneType</code> and wonder what it is. It's my personal opinion that these messages could simply just mention <code>None</code> by name because, as we'll see shortly, <code>None</code> leaves little room to ambiguity. So if you see some <code>TypeError</code> message that mentions that <code>NoneType</code> can't do this or can't do that, just know that it's simply the one <code>None</code> that was being used in a way that it can't.</p>\n<p>Also, <code>None</code> is a built-in constant. As soon as you start Python, it's available to use from everywhere, whether in module, class, or function. <code>NoneType</code> by contrast is not, you'd need to get a reference to it first by querying <code>None</code> for its class.</p>\n<pre><code>&gt;&gt;&gt; NoneType\nNameError: name 'NoneType' is not defined\n&gt;&gt;&gt; type(None)\nNoneType\n</code></pre>\n<p>You can check <code>None</code>'s uniqueness with Python's identity function <code>id()</code>. It returns the unique number assigned to an object, each object has one. If the id of two variables is the same, then they point in fact to the same object.</p>\n<pre><code>&gt;&gt;&gt; NoneType = type(None)\n&gt;&gt;&gt; id(None)\n10748000\n&gt;&gt;&gt; my_none = NoneType()\n&gt;&gt;&gt; id(my_none)\n10748000\n&gt;&gt;&gt; another_none = NoneType()\n&gt;&gt;&gt; id(another_none)\n10748000\n&gt;&gt;&gt; def function_that_does_nothing(): pass\n&gt;&gt;&gt; return_value = function_that_does_nothing()\n&gt;&gt;&gt; id(return_value)\n10748000\n</code></pre>\n<h2><code>None</code> cannot be overwritten</h2>\n<p>In much older versions of Python (before 2.4) it was possible to reassign <code>None</code>, but not any more. Not even as a class attribute or in the confines of a function.</p>\n<pre><code># In Python 2.7\n&gt;&gt;&gt; class SomeClass(object):\n...     def my_fnc(self):\n...             self.None = 'foo'\nSyntaxError: cannot assign to None\n&gt;&gt;&gt; def my_fnc():\n        None = 'foo'\nSyntaxError: cannot assign to None\n\n# In Python 3.5\n&gt;&gt;&gt; class SomeClass:\n...     def my_fnc(self):\n...             self.None = 'foo'\nSyntaxError: invalid syntax\n&gt;&gt;&gt; def my_fnc():\n        None = 'foo'\nSyntaxError: cannot assign to keyword\n</code></pre>\n<p>It's therefore safe to assume that all <code>None</code> references are the same. There isn't any &quot;custom&quot; <code>None</code>.</p>\n<h2>To test for <code>None</code> use the <code>is</code> operator</h2>\n<p>When writing code you might be tempted to test for <em>Noneness</em> like this:</p>\n<pre><code>if value==None:\n    pass\n</code></pre>\n<p>Or to test for falsehood like this</p>\n<pre><code>if not value:\n    pass\n</code></pre>\n<p>You need to understand the implications and why it's often a good idea to be explicit.</p>\n<h3>Case 1: testing if a value is <code>None</code></h3>\n<p>Why do</p>\n<pre><code>value is None\n</code></pre>\n<p>rather than</p>\n<pre><code>value==None\n</code></pre>\n<p>?</p>\n<p>The first is equivalent to:</p>\n<pre><code>id(value)==id(None)\n</code></pre>\n<p>Whereas the expression <code>value==None</code> is in fact applied like this</p>\n<pre><code>value.__eq__(None)\n</code></pre>\n<p>If the value really is <code>None</code> then you'll get what you expected.</p>\n<pre><code>&gt;&gt;&gt; nothing = function_that_does_nothing()\n&gt;&gt;&gt; nothing.__eq__(None)\nTrue\n</code></pre>\n<p>In most common cases the outcome will be the same, but the <code>__eq__()</code> method opens a door that voids any guarantee of accuracy, since it can be overridden in a class to provide special behavior.</p>\n<p>Consider this class.</p>\n<pre><code>&gt;&gt;&gt; class Empty(object):\n...     def __eq__(self, other):\n...         return not other\n</code></pre>\n<p>So you try it on <code>None</code> and it works</p>\n<pre><code>&gt;&gt;&gt; empty = Empty()\n&gt;&gt;&gt; empty==None\nTrue\n</code></pre>\n<p>But then it also works on the empty string</p>\n<pre><code>&gt;&gt;&gt; empty==''\nTrue\n</code></pre>\n<p>And yet</p>\n<pre><code>&gt;&gt;&gt; ''==None\nFalse\n&gt;&gt;&gt; empty is None\nFalse\n</code></pre>\n<h3>Case 2: Using <code>None</code> as a boolean</h3>\n<p>The following two tests</p>\n<pre><code>if value:\n    # Do something\n\nif not value:\n    # Do something\n</code></pre>\n<p>are in fact evaluated as</p>\n<pre><code>if bool(value):\n    # Do something\n\nif not bool(value):\n    # Do something\n</code></pre>\n<p><code>None</code> is a &quot;falsey&quot;, meaning that if cast to a boolean it will return <code>False</code> and if applied the <code>not</code> operator it will return <code>True</code>. Note however that it's not a property unique to <code>None</code>. In addition to <code>False</code> itself, the property is shared by empty lists, tuples, sets, dicts, strings, as well as 0, and all objects from classes that implement the <code>__bool__()</code> magic method to return <code>False</code>.</p>\n<pre><code>&gt;&gt;&gt; bool(None)\nFalse\n&gt;&gt;&gt; not None\nTrue\n\n&gt;&gt;&gt; bool([])\nFalse\n&gt;&gt;&gt; not []\nTrue\n\n&gt;&gt;&gt; class MyFalsey(object):\n...     def __bool__(self):\n...         return False\n&gt;&gt;&gt; f = MyFalsey()\n&gt;&gt;&gt; bool(f)\nFalse\n&gt;&gt;&gt; not f\nTrue\n</code></pre>\n<p>So when testing for variables in the following way, be extra aware of what you're including or excluding from the test:</p>\n<pre><code>def some_function(value=None):\n    if not value:\n        value = init_value()\n</code></pre>\n<p>In the above, did you mean to call <code>init_value()</code> when the value is set specifically to <code>None</code>, or did you mean that a value set to <code>0</code>, or the empty string, or an empty list should also trigger the initialization? Like I said, be mindful. As it's often the case, in Python <em>explicit is better than implicit</em>.</p>\n<h1><code>None</code> in practice</h1>\n<h2><code>None</code> used as a signal value</h2>\n<p><code>None</code> has a special status in Python. It's a favorite baseline value because many algorithms treat it as an exceptional value. In such scenarios it can be used as a flag to signal that a condition requires some special handling (such as the setting of a default value).</p>\n<p>You can assign <code>None</code> to the keyword arguments of a function and then explicitly test for it.</p>\n<pre><code>def my_function(value, param=None):\n    if param is None:\n        # Do something outrageous!\n</code></pre>\n<p>You can return it as the default when trying to get to an object's attribute and then explicitly test for it before doing something special.</p>\n<pre><code>value = getattr(some_obj, 'some_attribute', None)\nif value is None:\n    # do something spectacular!\n</code></pre>\n<p>By default a dictionary's <code>get()</code> method returns <code>None</code> when trying to access a non-existing key:</p>\n<pre><code>&gt;&gt;&gt; some_dict = {}\n&gt;&gt;&gt; value = some_dict.get('foo')\n&gt;&gt;&gt; value is None\nTrue\n</code></pre>\n<p>If you were to try to access it by using the subscript notation a <code>KeyError</code> would be raised</p>\n<pre><code>&gt;&gt;&gt; value = some_dict['foo']\nKeyError: 'foo'\n</code></pre>\n<p>Likewise if you attempt to pop a non-existing item</p>\n<pre><code>&gt;&gt;&gt; value = some_dict.pop('foo')\nKeyError: 'foo'\n</code></pre>\n<p>which you can suppress with a default value that is usually set to <code>None</code></p>\n<pre><code>value = some_dict.pop('foo', None)\nif value is None:\n    # Booom!\n</code></pre>\n<h2><code>None</code> used as both a flag and valid value</h2>\n<p>The above described uses of <code>None</code> apply when it is not considered a valid value, but more like a signal to do something special. There are situations however where it sometimes matters to know where <code>None</code> came from because even though it's used as a signal it could also be part of the data.</p>\n<p>When you query an object for its attribute with <code>getattr(some_obj, 'attribute_name', None)</code> getting back <code>None</code> doesn't tell you if the attribute you were trying to access was set to <code>None</code> or if it was altogether absent from the object. The same situation when accessing a key from a dictionary, like <code>some_dict.get('some_key')</code>, you don't know if <code>some_dict['some_key']</code> is missing or if it's just set to <code>None</code>. If you need that information, the usual way to handle this is to directly attempt accessing the attribute or key from within a <code>try/except</code> construct:</p>\n<pre><code>try:\n    # Equivalent to getattr() without specifying a default\n    # value = getattr(some_obj, 'some_attribute')\n    value = some_obj.some_attribute\n    # Now you handle `None` the data here\n    if value is None:\n        # Do something here because the attribute was set to None\nexcept AttributeError:\n    # We're now handling the exceptional situation from here.\n    # We could assign None as a default value if required.\n    value = None\n    # In addition, since we now know that some_obj doesn't have the\n    # attribute 'some_attribute' we could do something about that.\n    log_something(some_obj)\n</code></pre>\n<p>Similarly with dict:</p>\n<pre><code>try:\n    value = some_dict['some_key']\n    if value is None:\n        # Do something here because 'some_key' is set to None\nexcept KeyError:\n    # Set a default\n    value = None\n    # And do something because 'some_key' was missing\n    # from the dict.\n    log_something(some_dict)\n</code></pre>\n<p>The above two examples show how to handle object and dictionary cases. What about functions? The same thing, but we use the double asterisks keyword argument to that end:</p>\n<pre><code>def my_function(**kwargs):\n    try:\n        value = kwargs['some_key']\n        if value is None:\n            # Do something because 'some_key' is explicitly\n            # set to None\n    except KeyError:\n        # We assign the default\n        value = None\n        # And since it's not coming from the caller.\n        log_something('did not receive &quot;some_key&quot;')\n</code></pre>\n<h2><code>None</code> used only as a valid value</h2>\n<p>If you find that your code is littered with the above <code>try/except</code> pattern simply to differentiate between <code>None</code> flags and <code>None</code> data, then just use another test value. There's a pattern where a value that falls outside the set of valid values is inserted as part of the data in a data structure and is used to control and test special conditions (e.g. boundaries, state, etc.). Such a value is called a <em>sentinel</em> and it can be used the way <code>None</code> is used as a signal. It's trivial to create a sentinel in Python.</p>\n<pre><code>undefined = object()\n</code></pre>\n<p>The <code>undefined</code> object above is unique and doesn't do much of anything that might be of interest to a program, it's thus an excellent replacement for <code>None</code> as a flag. Some caveats apply, more about that after the code.</p>\n<p>With function</p>\n<pre><code>def my_function(value, param1=undefined, param2=undefined):\n    if param1 is undefined:\n        # We know nothing was passed to it, not even None\n        log_something('param1 was missing')\n        param1 = None\n\n\n    if param2 is undefined:\n        # We got nothing here either\n        log_something('param2 was missing')\n        param2 = None\n</code></pre>\n<p>With dict</p>\n<pre><code>value = some_dict.get('some_key', undefined)\nif value is None:\n    log_something(&quot;'some_key' was set to None&quot;)\n\nif value is undefined:\n    # We know that the dict didn't have 'some_key'\n    log_something(&quot;'some_key' was not set at all&quot;)\n    value = None\n</code></pre>\n<p>With an object</p>\n<pre><code>value = getattr(obj, 'some_attribute', undefined)\nif value is None:\n    log_something(&quot;'obj.some_attribute' was set to None&quot;)\nif value is undefined:\n    # We know that there's no obj.some_attribute\n    log_something(&quot;no 'some_attribute' set on obj&quot;)\n    value = None\n</code></pre>\n<p>As I mentioned earlier, custom sentinels come with some caveats. First, they're not keywords like <code>None</code>, so Python doesn't protect them. You can overwrite your <code>undefined</code> above at any time, anywhere in the module it's defined, so be careful how you expose and use them. Next, the instance returned by <code>object()</code> is not a singleton. If you make that call 10 times you get 10 different objects. Finally, usage of a sentinel is highly idiosyncratic. A sentinel is specific to the library it's used in and as such its scope should generally be limited to the library's internals. It shouldn't &quot;leak&quot; out. External code should only become aware of it, if their purpose is to extend or supplement the library's API.</p>\n"", '<p>It\'s not called null as in other languages, but <a href=""http://docs.python.org/library/constants.html?highlight=none#None"" rel=""noreferrer""><code>None</code></a>. There is always only one instance of this object, so you can check for equivalence with <code>x is None</code> (identity comparison) instead of <code>x == None</code>, if you want.</p>\n']"
5844672,Delete an element from a dictionary,"Is there a way to delete an element from a dictionary in python?

I know i can just call `.pop` on the dictionary, but that returns the element that was removed. What im looking for is something returns the dictionary *minus* the element in question. 

At present i have a helper function that accepts the dictionary in question as parameter, and then returns a dictionary with the element removed, i just wondered whether there was more elegant solution?",<python><dictionary><remove>,"['Why do you need a function that returns a dictionary, when you can just modify the dictionary directly?', '""Why do you need a function that returns a dictionary, when you can just modify the dictionary directly?""\nPerhaps because you want to write pure functions that *don\'t* modify their parameters?', 'The [dictionary `pop` method](https://docs.python.org/2/library/stdtypes.html#dict.pop) changes the dictionary _in-place_. Therefore it alters the _reference_ to the dictionary that was passed from the caller to the ""helper function"". So the ""helper function"" doesn\'t need to return anything, since the original reference to the dictionary in the caller will already be altered. Don\'t assign the return from `dict.pop()` to anything if you don\'t need it. EG: `do stuff with my_dict; my_dict.pop(my_key, None); do more stuff with my_dict # now doesn\'t have my_key`. Use `deepcopy(my_dict)` if needed.']","['<p>The <a href=""http://docs.python.org/reference/simple_stmts.html#the-del-statement"" rel=""noreferrer""><code>del</code> statement</a> removes an element:</p>\n<pre><code>del d[key]\n</code></pre>\n<p>Note that this mutates the existing dictionary, so the contents of the dictionary changes for anybody else who has a reference to the same instance. To return a <em>new</em> dictionary, make a copy of the dictionary:</p>\n<pre><code>def removekey(d, key):\n    r = dict(d)\n    del r[key]\n    return r\n</code></pre>\n<p>The <code>dict()</code> constructor makes a <em>shallow copy</em>. To make a deep copy, see the <a href=""https://docs.python.org/library/copy.html"" rel=""noreferrer""><code>copy</code> module</a>.</p>\n<hr />\n<p>Note that making a copy for every dict <code>del</code>/assignment/etc. means you\'re going from constant time to linear time, and also using linear space. For small dicts, this is not a problem. But if you\'re planning to make lots of copies of large dicts, you probably want a different data structure, like a HAMT (as described in <a href=""https://stackoverflow.com/a/50341031/908494"">this answer</a>).</p>\n', '<p><a href=""https://docs.python.org/library/stdtypes.html#dict.pop"" rel=""noreferrer""><code>pop</code></a> mutates the dictionary.</p>\n\n<pre><code> &gt;&gt;&gt; lol = {""hello"": ""gdbye""}\n &gt;&gt;&gt; lol.pop(""hello"")\n     \'gdbye\'\n &gt;&gt;&gt; lol\n     {}\n</code></pre>\n\n<p>If you want to keep the original you could just copy it.</p>\n', '<p>There\'re a lot of nice answers, but I want to emphasize one thing.</p>\n\n<p>You can use both <a href=""https://docs.python.org/3/library/stdtypes.html#dict.pop"" rel=""noreferrer""><code>dict.pop()</code></a> method and a more generic <a href=""https://docs.python.org/3/tutorial/datastructures.html#the-del-statement"" rel=""noreferrer""><code>del</code> statement</a> to remove items from a dictionary. They both mutate the original dictionary, so you need to make a copy (see details below).</p>\n\n<p><strong>And both of them will raise a <a href=""https://docs.python.org/3/library/exceptions.html#KeyError"" rel=""noreferrer""><code>KeyError</code></a> if the key you\'re providing to them is not present in the dictionary:</strong></p>\n\n<pre><code>key_to_remove = ""c""\nd = {""a"": 1, ""b"": 2}\ndel d[key_to_remove]  # Raises `KeyError: \'c\'`\n</code></pre>\n\n<p>and</p>\n\n<pre><code>key_to_remove = ""c""\nd = {""a"": 1, ""b"": 2}\nd.pop(key_to_remove)  # Raises `KeyError: \'c\'`\n</code></pre>\n\n<p>You have to take care of this:</p>\n\n<p><strong>by capturing the exception:</strong></p>\n\n<pre><code>key_to_remove = ""c""\nd = {""a"": 1, ""b"": 2}\ntry:\n    del d[key_to_remove]\nexcept KeyError as ex:\n    print(""No such key: \'%s\'"" % ex.message)\n</code></pre>\n\n<p>and</p>\n\n<pre><code>key_to_remove = ""c""\nd = {""a"": 1, ""b"": 2}\ntry:\n    d.pop(key_to_remove)\nexcept KeyError as ex:\n    print(""No such key: \'%s\'"" % ex.message)\n</code></pre>\n\n<p><strong>by performing a check:</strong></p>\n\n<pre><code>key_to_remove = ""c""\nd = {""a"": 1, ""b"": 2}\nif key_to_remove in d:\n    del d[key_to_remove]\n</code></pre>\n\n<p>and</p>\n\n<pre><code>key_to_remove = ""c""\nd = {""a"": 1, ""b"": 2}\nif key_to_remove in d:\n    d.pop(key_to_remove)\n</code></pre>\n\n<p><strong>but with <code>pop()</code> there\'s also a much more concise way - provide the default return value:</strong></p>\n\n<pre><code>key_to_remove = ""c""\nd = {""a"": 1, ""b"": 2}\nd.pop(key_to_remove, None)  # No `KeyError` here\n</code></pre>\n\n<p>Unless you use <code>pop()</code> to get the value of a key being removed you may provide anything, not necessary <code>None</code>.\nThough it might be that using <code>del</code> with <code>in</code> check is <strong>slightly</strong> faster due to <code>pop()</code> being a function with its own complications causing overhead. Usually it\'s not the case, so <code>pop()</code> with default value is good enough.</p>\n\n<hr>\n\n<p>As for the main question, you\'ll have to make a copy of your dictionary, to save the original dictionary and have a new one without the key being removed.</p>\n\n<p>Some other people here suggest making a full (deep) copy with <a href=""https://docs.python.org/3/library/copy.html?#copy.deepcopy"" rel=""noreferrer""><code>copy.deepcopy()</code></a>, which might be an overkill, a ""normal"" (shallow) copy, using <a href=""https://docs.python.org/3/library/copy.html?#copy.copy"" rel=""noreferrer""><code>copy.copy()</code></a> or <a href=""https://docs.python.org/3/library/stdtypes.html#dict.copy"" rel=""noreferrer""><code>dict.copy()</code></a>, might be enough. The dictionary keeps a reference to the object as a value for a key. So when you remove a key from a dictionary this reference is removed, not the object being referenced. The object itself may be removed later automatically by the garbage collector, if there\'re no other references for it in the memory. Making a deep copy requires more calculations compared to shallow copy, so it decreases code performance by making the copy, wasting memory and providing more work to the GC, sometimes shallow copy is enough.</p>\n\n<p>However, if you have mutable objects as dictionary values and plan to modify them later in the returned dictionary without the key, you have to make a deep copy.</p>\n\n<p><strong>With shallow copy:</strong></p>\n\n<pre><code>def get_dict_wo_key(dictionary, key):\n    """"""Returns a **shallow** copy of the dictionary without a key.""""""\n    _dict = dictionary.copy()\n    _dict.pop(key, None)\n    return _dict\n\n\nd = {""a"": [1, 2, 3], ""b"": 2, ""c"": 3}\nkey_to_remove = ""c""\n\nnew_d = get_dict_wo_key(d, key_to_remove)\nprint(d)  # {""a"": [1, 2, 3], ""b"": 2, ""c"": 3}\nprint(new_d)  # {""a"": [1, 2, 3], ""b"": 2}\nnew_d[""a""].append(100)\nprint(d)  # {""a"": [1, 2, 3, 100], ""b"": 2, ""c"": 3}\nprint(new_d)  # {""a"": [1, 2, 3, 100], ""b"": 2}\nnew_d[""b""] = 2222\nprint(d)  # {""a"": [1, 2, 3, 100], ""b"": 2, ""c"": 3}\nprint(new_d)  # {""a"": [1, 2, 3, 100], ""b"": 2222}\n</code></pre>\n\n<p><strong>With deep copy:</strong></p>\n\n<pre><code>from copy import deepcopy\n\n\ndef get_dict_wo_key(dictionary, key):\n    """"""Returns a **deep** copy of the dictionary without a key.""""""\n    _dict = deepcopy(dictionary)\n    _dict.pop(key, None)\n    return _dict\n\n\nd = {""a"": [1, 2, 3], ""b"": 2, ""c"": 3}\nkey_to_remove = ""c""\n\nnew_d = get_dict_wo_key(d, key_to_remove)\nprint(d)  # {""a"": [1, 2, 3], ""b"": 2, ""c"": 3}\nprint(new_d)  # {""a"": [1, 2, 3], ""b"": 2}\nnew_d[""a""].append(100)\nprint(d)  # {""a"": [1, 2, 3], ""b"": 2, ""c"": 3}\nprint(new_d)  # {""a"": [1, 2, 3, 100], ""b"": 2}\nnew_d[""b""] = 2222\nprint(d)  # {""a"": [1, 2, 3], ""b"": 2, ""c"": 3}\nprint(new_d)  # {""a"": [1, 2, 3, 100], ""b"": 2222}\n</code></pre>\n']"
9483757,END in git bash,"I'm trying to learn git with the help of git immersion http://gitimmersion.com/
But there's one thing that frustrates me whenever I use git log.

![enter image description here][1]


  [1]: https://i.sstatic.net/yJ0Ms.png


I can't figure out what to do next when I encounter this (END) word. I can't type any commands and I end up closing the current bash and open another. How do I type in the next command that I want to use?",<git>,"[""Even after I use q+Enter to quit, the <END> reappears every time I begin typing again. It eats up my first character. Thereafter, I'm able to type the command I want. However, I'd rather not have this behavior at all. I'm on Windows. Suggestions?"", ""Windows users: you must type q+enter first.  Once you escape with cntl+c, you'll be stuck in that weird loop.  Use ONLY q+enter to exit."", ""It's possible to break out by repeatedly typing q+enter+q+enter+q+enter until the end of time no matter what the console shows.""]","[""<p>You're in the <code>less</code> program, which makes the output of <code>git log</code> scrollable.</p>\n\n<p>Type <kbd>q</kbd> to exit this screen. Type <kbd>h</kbd> to get help.</p>\n\n<p>If you don't want to read the output in a pager and want it to be just printed to the terminal define the environment variable <code>GIT_PAGER</code> to <code>cat</code> or set <code>core.pager</code> to <code>cat</code> (execute <code>git config --global core.pager cat</code>).</p>\n"", ""<p>Actually, there are three ways to do it, precisely.</p>\n\n<p>Type any of the following 3 commands.</p>\n\n<ol>\n<li><strong>:</strong><kbd>q</kbd></li>\n<li><strong>:</strong><kbd>z</kbd>\nor</li>\n<li><kbd>Ctrl</kbd> <strong>+</strong> <kbd>z</kbd></li>\n</ol>\n\n<p>P.S.: Sometimes, for someone, one of these options doesn't seem to work and for others it works.</p>\n"", '<p>Add following alias in the .bashrc file</p>\n\n<pre><code>git --no-pager log --oneline -n 10\n</code></pre>\n\n<ul>\n<li><code>--no-pager</code> will encounter the (END) word</li>\n<li><code>-n 10</code> will show only the last 10 commits</li>\n<li><code>--oneline</code> will show the commit message, ignore the author, date information</li>\n</ul>\n']"
10123953,Sort Javascript Object Array By Date,"Say I have an array of a few objects:

    var array = [{id: 1 date: Mar 12 2012 10:00:00 AM}{id: 2 date: Mar 8 2012 08:00:00 AM}];

How can I sort this array by the date element in order from the date closest to the current date and time down? Keep in mind that the array may have many objects, but for the sake of simplicity I used 2.

Would I use the sort function and a custom comparator?",<javascript><datetime>,"['It seems like this question hasn\'t been answered. None of the answers below explain how to "" order from the date closest to the current date"".', 'the quickest way is to use the isomorphic [sort-array](https://github.com/75lb/sort-array) module which works natively in both browser and node, supporting any type of input, computed fields and custom sort orders.', 'not directly related, but if someone is trying to sort data fetched from a DB, this should be done in the SQL query.']","['<h2>Simplest Answer</h2>\n\n<pre><code>array.sort(function(a,b){\n  // Turn your strings into dates, and then subtract them\n  // to get a value that is either negative, positive, or zero.\n  return new Date(b.date) - new Date(a.date);\n});\n</code></pre>\n\n<h2>More Generic Answer</h2>\n\n<pre><code>array.sort(function(o1,o2){\n  if (sort_o1_before_o2)    return -1;\n  else if(sort_o1_after_o2) return  1;\n  else                      return  0;\n});\n</code></pre>\n\n<p>Or more tersely:</p>\n\n<pre><code>array.sort(function(o1,o2){\n  return sort_o1_before_o2 ? -1 : sort_o1_after_o2 ? 1 : 0;\n});\n</code></pre>\n\n<h2>Generic, Powerful Answer</h2>\n\n<p>Define a custom non-enumerable <code>sortBy</code> function using a <a href=""http://en.wikipedia.org/wiki/Schwartzian_transform"">Schwartzian transform</a> on all arrays :</p>\n\n<pre><code>(function(){\n  if (typeof Object.defineProperty === \'function\'){\n    try{Object.defineProperty(Array.prototype,\'sortBy\',{value:sb}); }catch(e){}\n  }\n  if (!Array.prototype.sortBy) Array.prototype.sortBy = sb;\n\n  function sb(f){\n    for (var i=this.length;i;){\n      var o = this[--i];\n      this[i] = [].concat(f.call(o,o,i),o);\n    }\n    this.sort(function(a,b){\n      for (var i=0,len=a.length;i&lt;len;++i){\n        if (a[i]!=b[i]) return a[i]&lt;b[i]?-1:1;\n      }\n      return 0;\n    });\n    for (var i=this.length;i;){\n      this[--i]=this[i][this[i].length-1];\n    }\n    return this;\n  }\n})();\n</code></pre>\n\n<p>Use it like so:</p>\n\n<pre><code>array.sortBy(function(o){ return o.date });\n</code></pre>\n\n<p>If your date is not directly comparable, make a comparable date out of it, e.g.</p>\n\n<pre><code>array.sortBy(function(o){ return new Date( o.date ) });\n</code></pre>\n\n<p>You can also use this to sort by multiple criteria if you return an array of values:</p>\n\n<pre><code>// Sort by date, then score (reversed), then name\narray.sortBy(function(o){ return [ o.date, -o.score, o.name ] };\n</code></pre>\n\n<p><em>See <a href=""http://phrogz.net/JS/Array.prototype.sortBy.js"">http://phrogz.net/JS/Array.prototype.sortBy.js</a> for more details.</em></p>\n', '<p>@Phrogz answers are both great, but here is a great, more concise answer:</p>\n<pre class=""lang-js prettyprint-override""><code>array.sort(function(a,b) { return a.getTime() - b.getTime() });\n</code></pre>\n<p>Using the arrow function way</p>\n<pre class=""lang-js prettyprint-override""><code>array.sort((a,b) =&gt; a.getTime() - b.getTime());\n</code></pre>\n<p>found here: <a href=""https://stackoverflow.com/questions/16690035/sort-date-in-javascript"">Sort date in Javascript</a></p>\n', ""<p>After correcting the JSON this should work for you now:</p>\n\n<pre><code>var array = [{id: 1, date:'Mar 12 2012 10:00:00 AM'}, {id: 2, date:'Mar 8 2012 08:00:00 AM'}];\n\n\narray.sort(function(a, b) {\n    var c = new Date(a.date);\n    var d = new Date(b.date);\n    return c-d;\n});\n</code></pre>\n""]"
