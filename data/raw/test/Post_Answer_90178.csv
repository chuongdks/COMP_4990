ParentId,CreationDate,Score,Body
"90178","2008-09-18 06:01:58","19","<pre><code>&lt;!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd""&gt;
&lt;html xmlns=""http://www.w3.org/1999/xhtml""&gt;
&lt;head&gt;
&lt;title&gt;Test&lt;/title&gt;
&lt;style type=""text/css""&gt;
body
,html
{
    height: 100%;
    margin: 0;
    padding: 0;
    color: #FFF;
}

#header
{
    float: left;
    width: 100%;
    background: red;
}

#content
{
    height: 100%;
    overflow: auto;
    background: blue;
}

&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;

    &lt;div id=""content""&gt;
        &lt;div id=""header""&gt;
                Header
                &lt;p&gt;Header stuff&lt;/p&gt;
        &lt;/div&gt;
            Content
            &lt;p&gt;Content stuff&lt;/p&gt;
    &lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>In all sane browsers, you can put the ""header"" div before the content, as a sibling, and the same CSS will work.  However, IE7- does not interpret the height correctly if the float is 100% in that case, so the header needs to be IN the content, as above.  The overflow: auto will cause double scroll bars on IE (which always has the viewport scrollbar visible, but disabled), but without it, the content will clip if it overflows.</p>
"
"90178","2008-09-18 08:16:50","294","<p>There really isn't a sound, cross-browser way to do this in CSS.  Assuming your layout has complexities, you need to use JavaScript to set the element's height.  The essence of what you need to do is:</p>

<pre><code>Element Height = Viewport height - element.offset.top - desired bottom margin
</code></pre>

<p>Once you can get this value and set the element's height, you need to attach event handlers to both the window onload and onresize so that you can fire your resize function.</p>

<p>Also, assuming your content could be larger than the viewport, you will need to set overflow-y to scroll.</p>
"
"90178","2008-09-18 17:52:16","7","<p>Vincent, I'll answer again using your new requirements.  Since you don't care about the content being hidden if it's too long,  you don't need to float the header.  Just put overflow hidden on the html and body tags, and set <code>#content</code> height to 100%. The content will always be longer than the viewport by the height of the header, but it'll be hidden and won't cause scrollbars.</p>

<pre><code>&lt;!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN""     ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd""&gt;
&lt;html xmlns=""http://www.w3.org/1999/xhtml""&gt;
  &lt;head&gt;
    &lt;title&gt;Test&lt;/title&gt;
    &lt;style type=""text/css""&gt;
    body, html {
      height: 100%;
      margin: 0;
      padding: 0;
      overflow: hidden;
      color: #FFF;
    }
    p {
      margin: 0;
    }

    #header {
      background: red;
    }

    #content {
      position: relative;
      height: 100%;
      background: blue;
    }

    #content #positioned {
      position: absolute;
      top: 0;
      right: 0;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;div id=""header""&gt;
    Header
    &lt;p&gt;Header stuff&lt;/p&gt;
  &lt;/div&gt;

  &lt;div id=""content""&gt;
    Content
    &lt;p&gt;Content stuff&lt;/p&gt;
    &lt;div id=""positioned""&gt;Positioned Content&lt;/div&gt;
  &lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
"
"90178","2011-04-11 15:48:06","29","<p>I've been searching for an answer for this as well. If you are fortunate enough to be able to target IE8 and up, you can use <code>display:table</code> and related values to get the rendering rules of tables with block-level elements including div.</p>

<p>If you are even luckier and your users are using top-tier browsers (for example, if this is an intranet app on computers you control, like my latest project is), you can use the new <a href=""http://www.w3.org/TR/css3-flexbox/"" rel=""noreferrer"">Flexible Box Layout</a> in CSS3!</p>
"
"90178","2011-06-20 09:36:23","13","<p>I wresteled with this for a while and ended up with the following:</p>

<p>Since it is easy to make the content DIV the same height as the parent but apparently difficult to make it the parent height minus the header height I decided to make content div full height but position it absolutely in the top left corner and then define a padding for the top which has the height of the header. This way the content displays neatly under the header and fills the whole remaining space:</p>

<pre class=""lang-css prettyprint-override""><code>body {
    padding: 0;
    margin: 0;
    height: 100%;
    overflow: hidden;
}

#header {
    position: absolute;
    top: 0;
    left: 0;
    height: 50px;
}

#content {
    position: absolute;
    top: 0;
    left: 0;
    padding-top: 50px;
    height: 100%;
}
</code></pre>
"
"90178","2011-08-06 03:30:33","-2","<p>it <strong>never worked for me in other way then with use of the JavaScript</strong> as NICCAI suggested in the very first answer. I am using that approach to rescale the <code>&lt;div&gt;</code> with the Google Maps. </p>

<p>Here is the full example how to do that (works in Safari/FireFox/IE/iPhone/Andorid (works with rotation)):</p>

<p>CSS</p>

<pre><code>body {
  height: 100%;
  margin: 0;
  padding: 0;
}

.header {
  height: 100px;
  background-color: red;
}

.content {
  height: 100%;
  background-color: green;
}
</code></pre>

<p>JS</p>

<pre><code>function resize() {
  // Get elements and necessary element heights
  var contentDiv = document.getElementById(""contentId"");
  var headerDiv = document.getElementById(""headerId"");
  var headerHeight = headerDiv.offsetHeight;

  // Get view height
  var viewportHeight = document.getElementsByTagName('body')[0].clientHeight;

  // Compute the content height - we want to fill the whole remaining area
  // in browser window
  contentDiv.style.height = viewportHeight - headerHeight;
}

window.onload = resize;
window.onresize = resize;
</code></pre>

<p>HTML</p>

<pre><code>&lt;body&gt;
  &lt;div class=""header"" id=""headerId""&gt;Hello&lt;/div&gt;
  &lt;div class=""content"" id=""contentId""&gt;&lt;/div&gt;
&lt;/body&gt;
</code></pre>
"
"90178","2011-10-17 14:00:39","27","<p>What worked for me (with a div within another div and I assume in all other circumstances) is to set the bottom padding to 100%. That is, add this to your css / stylesheet:</p>

<pre class=""lang-css prettyprint-override""><code>padding-bottom: 100%;
</code></pre>
"
"90178","2011-10-21 15:02:20","197","<p>The original post is more than 3 years ago. I guess many people who come to this post like me are looking for an app-like layout solution, say a somehow fixed header, footer, and full height content taking up the rest screen. If so, this post may help, it works on IE7+, etc.</p>

<p><a href=""http://blog.stevensanderson.com/2011/10/05/full-height-app-layouts-a-css-trick-to-make-it-easier/"" rel=""noreferrer"">http://blog.stevensanderson.com/2011/10/05/full-height-app-layouts-a-css-trick-to-make-it-easier/</a></p>

<p>And here are some snippets from that post:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>@media screen { 
  
  /* start of screen rules. */ 
  
  /* Generic pane rules */
  body { margin: 0 }
  .row, .col { overflow: hidden; position: absolute; }
  .row { left: 0; right: 0; }
  .col { top: 0; bottom: 0; }
  .scroll-x { overflow-x: auto; }
  .scroll-y { overflow-y: auto; }

  .header.row { height: 75px; top: 0; }
  .body.row { top: 75px; bottom: 50px; }
  .footer.row { height: 50px; bottom: 0; }
  
  /* end of screen rules. */ 
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div class=""header row"" style=""background:yellow;""&gt;
    &lt;h2&gt;My header&lt;/h2&gt;
&lt;/div&gt; 
&lt;div class=""body row scroll-y"" style=""background:lightblue;""&gt;
    &lt;p&gt;The body&lt;/p&gt;
&lt;/div&gt; 
&lt;div class=""footer row"" style=""background:#e9e9e9;""&gt;
    My footer
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
"
"90178","2012-02-20 09:21:45","12","<p>Why not just like this?</p>

<pre class=""lang-css prettyprint-override""><code>html, body {
    height: 100%;
}

#containerInput {
    background-image: url('../img/edit_bg.jpg');
    height: 40%;
}

#containerControl {
    background-image: url('../img/control_bg.jpg');
    height: 60%;
}
</code></pre>

<p>Giving you html and body (in that order) a height and then just give your elements a height?</p>

<p>Works for me</p>
"
"90178","2012-09-14 08:02:34","4","<p>I found a quite simple solution, because for me it was just a design issue.
I wanted the rest of the Page not to be white below the red footer.
So i set the pages background color to red. And the contents backgroundcolor to white.
With the contents height set to eg. 20em or 50% an almost empty page won't leave the whole page red. </p>
"
"90178","2013-04-27 11:45:48","5","<p>Try this</p>

<pre class=""lang-js prettyprint-override""><code>var sizeFooter = function(){
    $("".webfooter"")
        .css(""padding-bottom"", ""0px"")
        .css(""padding-bottom"", $(window).height() - $(""body"").height())
}
$(window).resize(sizeFooter);
</code></pre>
"
"90178","2013-05-03 10:55:31","29","<p>If you can deal with not supporting old browsers (that is, MSIE 9 or older), you can do this with <a href=""http://caniuse.com/#feat=flexbox"" rel=""noreferrer"">Flexible Box Layout Module</a> which is already W3C CR. That module allows other nice tricks, too, such as re-ordering content.</p>
<p>Unfortunately, MSIE 9 or lesser do not support this and you have to use vendor prefix for the CSS property for every browser other than Firefox. Hopefully other vendors drop the prefix soon, too.</p>
<p>An another choice would be <a href=""http://caniuse.com/#search=grid"" rel=""noreferrer"">CSS Grid Layout</a> but that has even less support from stable versions of browsers. In practice, only MSIE 10 supports this.</p>
<p><strong>Update year 2020</strong>: All modern browsers support both <code>display: flex</code> and <code>display: grid</code>. The only one missing is support for <code>subgrid</code> which in only supported by Firefox. Note that MSIE does not support either by the spec but if you're willing to add MSIE specific CSS hacks, it can be made to behave. I would suggest simply ignoring MSIE because even Microsoft says it should not be used anymore. Microsoft Edge supports these features just fine (except for subgrid support since is shares the Blink rendering engine with Chrome).</p>
<p><strong>Example using <code>display: grid</code>:</strong></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>html, body
{
  min-height: 100vh;
  padding: 0;
  margin: 0;
}

body
{
  display: grid;
  grid:
    ""myheader"" auto
    ""mymain"" minmax(0,1fr)
    ""myfooter"" auto /
    minmax(10rem, 90rem);
}

header
{
  grid-area: myheader;
  background: yellow;
}

main
{
  grid-area: mymain;
  background: pink;
  align-self: center
    /* or stretch
      + display: flex;
      + flex-direction: column;
      + justify-content: center; */
}

footer
{
  grid-area: myfooter;
  background: cyan;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;header&gt;Header content&lt;/header&gt;
&lt;main&gt;Main content which should be centered and the content length may change.
&lt;details&gt;&lt;summary&gt;Collapsible content&lt;/summary&gt;
&lt;p&gt;Here's some text to cause more vertical space to be used.&lt;/p&gt;
&lt;p&gt;Here's some text to cause more vertical space to be used (2).&lt;/p&gt;
&lt;p&gt;Here's some text to cause more vertical space to be used (3).&lt;/p&gt;
&lt;p&gt;Here's some text to cause more vertical space to be used (4).&lt;/p&gt;
&lt;p&gt;Here's some text to cause more vertical space to be used (5).&lt;/p&gt;
&lt;/details&gt;
&lt;/main&gt;
&lt;footer&gt;Footer content&lt;/footer&gt;</code></pre>
</div>
</div>
</p>
<p><strong>Example using <code>display: flex</code>:</strong></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>html, body
{
  min-height: 100vh;
  padding: 0;
  margin: 0;
}

body
{
  display: flex; 
}

main
{
  background: pink;
  align-self: center;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;main&gt;Main content which should be centered and the content length may change.
&lt;details&gt;&lt;summary&gt;Collapsible content&lt;/summary&gt;
&lt;p&gt;Here's some text to cause more vertical space to be used.&lt;/p&gt;
&lt;p&gt;Here's some text to cause more vertical space to be used (2).&lt;/p&gt;
&lt;p&gt;Here's some text to cause more vertical space to be used (3).&lt;/p&gt;
&lt;p&gt;Here's some text to cause more vertical space to be used (4).&lt;/p&gt;
&lt;p&gt;Here's some text to cause more vertical space to be used (5).&lt;/p&gt;
&lt;/details&gt;
&lt;/main&gt;</code></pre>
</div>
</div>
</p>
"
"90178","2013-06-06 11:20:33","164","<p>Instead of using tables in the markup, you could use CSS tables.</p>

<h2>Markup</h2>

<pre><code>&lt;body&gt;    
    &lt;div&gt;hello &lt;/div&gt;
    &lt;div&gt;there&lt;/div&gt;
&lt;/body&gt;
</code></pre>

<h2>(Relevant) CSS</h2>

<pre><code>body
{
    display:table;
    width:100%;
}
div
{
    display:table-row;
}
div+ div
{
    height:100%;  
}
</code></pre>

<p><a href=""http://jsfiddle.net/danield770/FC7eY/""><strong>FIDDLE1</strong></a> and <strong><a href=""http://jsfiddle.net/danield770/FC7eY/1/"">FIDDLE2</a></strong></p>

<p><strong>Some advantages of this method are:</strong></p>

<p>1) Less markup</p>

<p>2) Markup is more semantic than tables, because this is not tabular data.</p>

<p>3) Browser support is <strong>very good</strong>: IE8+, All modern browsers and mobile devices (<a href=""http://caniuse.com/css-table"">caniuse</a>)  </p>

<p><hr>
Just for completeness, here are the equivalent Html elements to css properties for the <a href=""http://www.w3.org/TR/CSS2/tables.html#table-display"">The CSS table model</a></p>

<pre><code>table    { display: table }
tr       { display: table-row }
thead    { display: table-header-group }
tbody    { display: table-row-group }
tfoot    { display: table-footer-group }
col      { display: table-column }
colgroup { display: table-column-group }
td, th   { display: table-cell }
caption  { display: table-caption } 
</code></pre>
"
"90178","2013-07-05 21:17:02","9","<p>You can actually use <code>display: table</code> to split the area into two elements (header and content), where the header can vary in height and the content fills the remaining space. This works with the whole page, as well as when the area is simply the content of another element positioned with <code>position</code> set to <code>relative</code>, <code>absolute</code> or <code>fixed</code>. It will work as long as the parent element has a non-zero height.</p>

<p><a href=""http://jsfiddle.net/amiramix/aD6gE/"" rel=""noreferrer"">See this fiddle</a> and also the code below:</p>

<p>CSS:</p>

<pre class=""lang-css prettyprint-override""><code>body, html {
    height: 100%;
    margin: 0;
    padding: 0;
}

p {
    margin: 0;
    padding: 0;
}

.additional-padding {
    height: 50px;
    background-color: #DE9;
}

.as-table {
    display: table;
    height: 100%;
    width: 100%;
}

.as-table-row {
    display: table-row;
    height: 100%;
}

#content {
    width: 100%;
    height: 100%;
    background-color: #33DD44;
}
</code></pre>

<p>HTML:</p>

<pre class=""lang-html prettyprint-override""><code>&lt;div class=""as-table""&gt;
    &lt;div id=""header""&gt;
        &lt;p&gt;This header can vary in height, it also doesn't have to be displayed as table-row. It will simply take the necessary space and the rest below will be taken by the second div which is displayed as table-row. Now adding some copy to artificially expand the header.&lt;/p&gt;
        &lt;div class=""additional-padding""&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=""as-table-row""&gt;
        &lt;div id=""content""&gt;
            &lt;p&gt;This is the actual content that takes the rest of the available space.&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
"
"90178","2014-04-27 12:05:12","139","<h2>CSS only Approach (If height is known/fixed)</h2>

<p>When you want the middle element to span across entire page vertically, you can use <a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/calc"" rel=""noreferrer""><code>calc()</code></a> which is introduced in CSS3.</p>

<p>Assuming we have a <em>fixed height</em> <code>header</code> and <code>footer</code> elements and we want the <code>section</code> tag to take entire available vertical height...</p>

<p><a href=""http://jsfiddle.net/WdrDH/"" rel=""noreferrer""><strong>Demo</strong></a></p>

<p><strong>Assumed markup</strong> and your CSS should be</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>html,
body {
  height: 100%;
}

header {
  height: 100px;
  background: grey;
}

section {
  height: calc(100% - (100px + 150px));
  /* Adding 100px of header and 150px of footer */
  background: tomato;
}

footer {
  height: 150px;
  background-color: blue;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;header&gt;100px&lt;/header&gt;
&lt;section&gt;Expand me for remaining space&lt;/section&gt;
&lt;footer&gt;150px&lt;/footer&gt;</code></pre>
</div>
</div>
</p>

<p>So here, what am doing is, adding up the height of elements and than deducting from <code>100%</code> using <code>calc()</code> function.</p>

<p>Just make sure that you use <code>height: 100%;</code> for the parent elements.</p>
"
"90178","2014-07-27 08:14:37","1768","<h3>2015 update: the flexbox approach</h3>

<p>There are two other answers briefly mentioning <a href=""https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes"" rel=""noreferrer"">flexbox</a>; however, that was more than two years ago, and they don't provide any examples. The specification for flexbox has definitely settled now.</p>

<blockquote>
  <p>Note: Though CSS Flexible Boxes Layout specification is at the Candidate Recommendation stage, not all browsers have implemented it. WebKit implementation must be prefixed with -webkit-; Internet Explorer implements an old version of the spec, prefixed with -ms-; Opera 12.10 implements the latest version of the spec, unprefixed. See the compatibility table on each property for an up-to-date compatibility status.</p>
  
  <p>(taken from <a href=""https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes"" rel=""noreferrer"">https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes</a>)</p>
</blockquote>

<p>All major browsers and IE11+ support Flexbox. For IE 10 or older, you can use the FlexieJS shim.</p>

<p>To check current support you can also see here:
<a href=""http://caniuse.com/#feat=flexbox"" rel=""noreferrer"">http://caniuse.com/#feat=flexbox</a></p>

<h3>Working example</h3>

<p>With flexbox you can easily switch between any of your rows or columns either having fixed dimensions, content-sized dimensions or remaining-space dimensions. In my example I have set the header to snap to its content (as per the OPs question), I've added a footer to show how to add a fixed-height region and then set the content area to fill up the remaining space.</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>html,
body {
  height: 100%;
  margin: 0;
}

.box {
  display: flex;
  flex-flow: column;
  height: 100%;
}

.box .row {
  border: 1px dotted grey;
}

.box .row.header {
  flex: 0 1 auto;
  /* The above is shorthand for:
  flex-grow: 0,
  flex-shrink: 1,
  flex-basis: auto
  */
}

.box .row.content {
  flex: 1 1 auto;
}

.box .row.footer {
  flex: 0 1 40px;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!-- Obviously, you could use HTML5 tags like `header`, `footer` and `section` --&gt;

&lt;div class=""box""&gt;
  &lt;div class=""row header""&gt;
    &lt;p&gt;&lt;b&gt;header&lt;/b&gt;
      &lt;br /&gt;
      &lt;br /&gt;(sized to content)&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class=""row content""&gt;
    &lt;p&gt;
      &lt;b&gt;content&lt;/b&gt;
      (fills remaining space)
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div class=""row footer""&gt;
    &lt;p&gt;&lt;b&gt;footer&lt;/b&gt; (fixed height)&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>

<p>In the CSS above, the <a href=""https://developer.mozilla.org/en/CSS/flex"" rel=""noreferrer"">flex</a> property shorthands the <a href=""https://developer.mozilla.org/en/CSS/flex-grow"" rel=""noreferrer"">flex-grow</a>, <a href=""https://developer.mozilla.org/en/CSS/flex-shrink"" rel=""noreferrer"">flex-shrink</a>, and <a href=""https://developer.mozilla.org/en/CSS/flex-basis"" rel=""noreferrer"">flex-basis</a> properties to establish the flexibility of the flex items. Mozilla has a <a href=""https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes"" rel=""noreferrer"">good introduction to the flexible boxes model</a>.</p>
"
"90178","2014-09-14 21:09:51","37","<p>It could be done purely by <code>CSS</code> using <code>vh</code>:</p>

<pre class=""lang-css prettyprint-override""><code>#page {
    display:block; 
    width:100%; 
    height:95vh !important; 
    overflow:hidden;
}

#tdcontent {
    float:left; 
    width:100%; 
    display:block;
}

#content {      
    float:left; 
    width:100%; 
    height:100%; 
    display:block; 
    overflow:scroll;
}
</code></pre>

<p>and the <code>HTML</code></p>

<pre><code>&lt;div id=""page""&gt;

   &lt;div id=""tdcontent""&gt;&lt;/div&gt;
   &lt;div id=""content""&gt;&lt;/div&gt;

&lt;/div&gt;
</code></pre>

<p>I checked it, It works in all major browsers: <code>Chrome</code>, <code>IE</code>, and <code>FireFox</code></p>
"
"90178","2015-02-20 17:12:17","46","<p>None of the solutions posted work when you need the bottom div to scroll when the content is too tall.  Here's a solution that works in that case:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.table {
  display: table;
}

.table-row {
  display: table-row;
}

.table-cell {
  display: table-cell;
}

.container {
  width: 400px;
  height: 300px;
}

.header {
  background: cyan;
}

.body {
  background: yellow;
  height: 100%;
}

.body-content-outer-wrapper {
  height: 100%;
}

.body-content-inner-wrapper {
  height: 100%;
  position: relative;
  overflow: auto;
}

.body-content {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div class=""table container""&gt;
  &lt;div class=""table-row header""&gt;
    &lt;div&gt;This is the header whose height is unknown&lt;/div&gt;
    &lt;div&gt;This is the header whose height is unknown&lt;/div&gt;
    &lt;div&gt;This is the header whose height is unknown&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=""table-row body""&gt;
    &lt;div class=""table-cell body-content-outer-wrapper""&gt;
      &lt;div class=""body-content-inner-wrapper""&gt;
        &lt;div class=""body-content""&gt;
          &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;
          &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;
          &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;
          &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;
          &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;
          &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;
          &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;
          &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;
          &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;
          &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;
          &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;
          &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;
          &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;
          &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;
          &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;
          &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;
          &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;
          &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>

<p><a href=""http://blogs.msdn.com/b/kurlak/archive/2015/02/20/filling-the-remaining-height-of-a-container-while-handling-overflow-in-css.aspx"" rel=""noreferrer"">Original source: Filling the Remaining Height of a Container While Handling Overflow in CSS</a></p>

<p><a href=""http://jsfiddle.net/352ntoz2/"" rel=""noreferrer"">JSFiddle live preview</a></p>
"
"90178","2015-02-27 18:21:05","113","<p>A simple solution, using flexbox:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>html,
body {
  height: 100%;
}

body {
  display: flex;
  flex-direction: column;
}

.content {
  flex-grow: 1;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;body&gt;
  &lt;div&gt;header&lt;/div&gt;
  &lt;div class=""content""&gt;&lt;/div&gt;
&lt;/body&gt;</code></pre>
</div>
</div>
</p>

<p><a href=""http://codepen.io/isaacalves/pen/myKpVK"" rel=""noreferrer"">Codepen sample</a></p>

<p><a href=""http://codepen.io/isaacalves/pen/MYXENq"" rel=""noreferrer"">An alternate solution, with a div centered within the content div</a></p>
"
"90178","2015-08-24 12:57:25","41","<p><strong>CSS3 Simple Way</strong></p>

<pre><code>height: calc(100% - 10px); // 10px is height of your first div...
</code></pre>

<p>all major browsers these days support it, so go ahead if you don't have requirement to support vintage browsers.</p>
"
"90178","2015-10-30 15:39:16","22","<p>There's a ton of answers now, but I found using <code>height: 100vh;</code> to work on the div element that needs to fill up the entire vertical space available.</p>

<p>In this way, I do not need to play around with display or positioning. This came in handy when using Bootstrap to make a dashboard wherein I had a sidebar and a main. I wanted the main to stretch and fill the entire vertical space so that I could apply a background colour.</p>

<pre><code>div {
    height: 100vh;
}
</code></pre>

<p>Supports IE9 and up: <a href=""http://caniuse.com/#feat=viewport-units"" rel=""noreferrer"">click to see the link</a></p>
"
"90178","2016-01-03 17:16:47","41","<blockquote>
  <p><em>Disclaimer: The accepted answer gives the idea of the solution, but I'm finding it a bit bloated with an unnecessary wrapper and css rules. Below is a solution with very few css rules.</em></p>
</blockquote>

<p><strong>HTML 5</strong></p>

<pre><code>&lt;body&gt;
    &lt;header&gt;Header with an arbitrary height&lt;/header&gt;
    &lt;main&gt;
        This container will grow so as to take the remaining height
    &lt;/main&gt;
&lt;/body&gt;
</code></pre>

<p><strong>CSS</strong></p>

<pre><code>body {
  display: flex;
  flex-direction: column;
  min-height: 100vh;       /* body takes whole viewport's height */
}

main {
  flex: 1;                 /* this will make the container take the free space */
}
</code></pre>

<p>Solution above uses <a href=""http://caniuse.com/#feat=viewport-units"" rel=""noreferrer"">viewport units</a> and <a href=""http://caniuse.com/#feat=flexbox"" rel=""noreferrer"">flexbox</a>, and is therefore IE10+, providing you use the old syntax for IE10.</p>

<p><strong>Codepen to play with: <a href=""http://codepen.io/michaelbazos/pen/mVRBXM"" rel=""noreferrer"">link to codepen</a></strong></p>

<p><strong>Or this one, for those needing the main container to be scrollable in case of overflowing content: <a href=""http://codepen.io/michaelbazos/pen/pgRWVG"" rel=""noreferrer"">link to codepen</a></strong></p>
"
"90178","2016-05-22 03:20:04","90","<p>Used: 
<code>height: calc(100vh - 110px);</code></p>

<p>code: 
<div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>  
.header { height: 60px; top: 0; background-color: green}
.body {
    height: calc(100vh - 110px); /*50+60*/
    background-color: gray;
}
.footer { height: 50px; bottom: 0; }
  </code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div class=""header""&gt;
    &lt;h2&gt;My header&lt;/h2&gt;
&lt;/div&gt; 
&lt;div class=""body""&gt;
    &lt;p&gt;The body&lt;/p&gt;
&lt;/div&gt; 
&lt;div class=""footer""&gt;
    My footer
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
"
"90178","2016-07-01 20:53:17","5","<p>Spinning off the idea of Mr. Alien...</p>

<p>This seems a cleaner solution than the popular flex box one for CSS3 enabled browsers.</p>

<p>Simply use min-height(instead of height) with calc() to the content block. </p>

<p>The calc() starts with 100% and subtracts heights of headers and footers (need to include padding values)</p>

<p>Using ""min-height"" instead of ""height"" is particularly useful so it can work with javascript rendered content and JS frameworks like Angular2. Otherwise, the calculation will not push the footer to the bottom of the page once the javascript rendered content is visible.</p>

<p>Here is a simple example of a header and footer using 50px height and 20px padding for both.</p>

<p>Html:</p>

<pre><code>&lt;body&gt;
    &lt;header&gt;&lt;/header&gt;
    &lt;div class=""content""&gt;&lt;/div&gt;
    &lt;footer&gt;&lt;/footer&gt;
&lt;/body&gt;
</code></pre>

<p>Css:</p>

<pre><code>.content {
    min-height: calc(100% - (50px + 20px + 20px + 50px + 20px + 20px));
}
</code></pre>

<p>Of course, the math can be simplified but you get the idea...</p>
"
"90178","2016-08-25 16:13:25","5","<p>I had the same problem but I could not make work the solution with flexboxes above. So I created my own template, that includes:</p>

<ul>
<li>a header with a fixed size element</li>
<li>a footer</li>
<li>a side bar with a scrollbar that occupies the remaining height</li>
<li>content</li>
</ul>

<p>I used flexboxes but in a more simple way, using only properties <strong>display: flex</strong> and <strong>flex-direction: row|column</strong>:</p>

<p>I do use angular and I want my component sizes to be 100% of their parent element.</p>

<p>The key is to set the size (in percents) for all parents inorder to limit their size. In the following example myapp height has 100% of the viewport.</p>

<p>The main component has 90% of the viewport, because header and footer have 5%.</p>

<p>I posted my template here: <a href=""https://jsfiddle.net/abreneliere/mrjh6y2e/3"" rel=""noreferrer"">https://jsfiddle.net/abreneliere/mrjh6y2e/3</a></p>

<pre><code>       body{
        margin: 0;
        color: white;
        height: 100%;
    }
    div#myapp
    {
        display: flex;
        flex-direction: column;
        background-color: red; /* &lt;-- painful color for your eyes ! */
        height: 100%; /* &lt;-- if you remove this line, myapp has no limited height */
    }
    div#main /* parent div for sidebar and content */
    {
        display: flex;
        width: 100%;
        height: 90%; 
    }
    div#header {
        background-color: #333;
        height: 5%;
    }
    div#footer {
        background-color: #222;
        height: 5%;
    }
    div#sidebar {
        background-color: #666;
        width: 20%;
        overflow-y: auto;
     }
    div#content {
        background-color: #888;
        width: 80%;
        overflow-y: auto;
    }
    div.fized_size_element {
        background-color: #AAA;
        display: block;
        width: 100px;
        height: 50px;
        margin: 5px;
    }
</code></pre>

<p>Html:</p>

<pre><code>&lt;body&gt;
&lt;div id=""myapp""&gt;
    &lt;div id=""header""&gt;
        HEADER
        &lt;div class=""fized_size_element""&gt;&lt;/div&gt;

    &lt;/div&gt;
    &lt;div id=""main""&gt;
        &lt;div id=""sidebar""&gt;
            SIDEBAR
            &lt;div class=""fized_size_element""&gt;&lt;/div&gt;
            &lt;div class=""fized_size_element""&gt;&lt;/div&gt;
            &lt;div class=""fized_size_element""&gt;&lt;/div&gt;
            &lt;div class=""fized_size_element""&gt;&lt;/div&gt;
            &lt;div class=""fized_size_element""&gt;&lt;/div&gt;
            &lt;div class=""fized_size_element""&gt;&lt;/div&gt;
            &lt;div class=""fized_size_element""&gt;&lt;/div&gt;
            &lt;div class=""fized_size_element""&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=""content""&gt;
            CONTENT
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div id=""footer""&gt;
        FOOTER
    &lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;
</code></pre>
"
"90178","2016-10-13 02:28:18","0","<p>It's dynamic calc the remining screen space, better using Javascript.</p>

<p>You can use CSS-IN-JS technology, like below lib:</p>

<p><a href=""https://github.com/cssobj/cssobj"" rel=""nofollow"">https://github.com/cssobj/cssobj</a></p>

<p>DEMO: <a href=""https://cssobj.github.io/cssobj-demo/"" rel=""nofollow"">https://cssobj.github.io/cssobj-demo/</a></p>
"
"90178","2017-02-01 15:59:23","7","<p>For mobile app i use only VH and VW</p>
<pre class=""lang-html prettyprint-override""><code>&lt;div class=&quot;container&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Title&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;Content&lt;/div&gt;
    &lt;div class=&quot;footer&quot;&gt;Footer&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<pre class=""lang-css prettyprint-override""><code>.container {
    width: 100vw;
    height: 100vh;
    font-size: 5vh;
}
    
.title {
    height: 20vh;
    background-color: red;
}
    
.content {
    height: 60vh;
    background: blue;
}
    
.footer {
    height: 20vh;
    background: green;
}
</code></pre>
<p>Demo - <a href=""https://jsfiddle.net/u763ck92/"" rel=""nofollow noreferrer"">https://jsfiddle.net/u763ck92/</a></p>
"
"90178","2017-06-17 18:19:17","50","<p>How about you simply use <code>vh</code> which stands for <code>view height</code> in <strong>CSS</strong>...</p>

<p>Look at the <strong>code snippet</strong> I created for you below and run it:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>body {
  padding: 0;
  margin: 0;
}

.full-height {
  width: 100px;
  height: 100vh;
  background: red;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div class=""full-height""&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>

<p>Also, look at the image below which I created for you:</p>

<p><a href=""https://i.sstatic.net/Oy7mP.jpg"" rel=""noreferrer""><img src=""https://i.sstatic.net/Oy7mP.jpg"" alt=""Make a div fill the height of the remaining screen space""></a></p>
"
"90178","2017-07-04 14:27:17","19","<p><a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout"" rel=""noreferrer""><strong>CSS Grid Solution</strong></a></p>

<p>Just defining the <code>body</code> with <code>display:grid</code> and the <code>grid-template-rows</code> using <code>auto</code> and the <code>fr</code> value property.</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>* {
  margin: 0;
  padding: 0;
}

html {
  height: 100%;
}

body {
  min-height: 100%;
  display: grid;
  grid-template-rows: auto 1fr auto;
}

header {
  padding: 1em;
  background: pink;
}

main {
  padding: 1em;
  background: lightblue;
}

footer {
  padding: 2em;
  background: lightgreen;
}

main:hover {
  height: 2000px;
  /* demos expansion of center element */
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;header&gt;HEADER&lt;/header&gt;
&lt;main&gt;MAIN&lt;/main&gt;
&lt;footer&gt;FOOTER&lt;/footer&gt;</code></pre>
</div>
</div>
</p>

<p><a href=""https://css-tricks.com/snippets/css/complete-guide-grid/"" rel=""noreferrer""><strong>A Complete Guide to Grids @ CSS-Tricks.com</strong></a></p>
"
"90178","2018-03-23 10:43:44","10","<pre><code> style=""height:100vh""
</code></pre>

<p>solved the problem for me. In my case I applied this to the required div</p>
"
"90178","2020-02-25 21:16:34","30","<p><strong>In Bootstrap:</strong></p>
<p>CSS Styles:</p>
<pre><code>html, body {
    height: 100%;
}
</code></pre>
<hr />
<p><em>1) Just fill the height of the remaining screen space:</em></p>
<pre><code>&lt;body class=&quot;d-flex flex-column&quot;&gt;
  &lt;div class=&quot;d-flex flex-column flex-grow-1&quot;&gt;

    &lt;header&gt;Header&lt;/header&gt;
    &lt;div&gt;Content&lt;/div&gt;
    &lt;footer class=&quot;mt-auto&quot;&gt;Footer&lt;/footer&gt;

  &lt;/div&gt;
&lt;/body&gt;
</code></pre>
<p><a href=""https://i.sstatic.net/3vE98m.png"" rel=""noreferrer""><img src=""https://i.sstatic.net/3vE98m.png"" alt=""![enter image description here"" /></a></p>
<hr />
<p><em>2) fill the height of the remaining screen space and aligning content to the middle of the parent element:</em></p>
<pre><code>&lt;body class=&quot;d-flex flex-column&quot;&gt;
  &lt;div class=&quot;d-flex flex-column flex-grow-1&quot;&gt;

    &lt;header&gt;Header&lt;/header&gt;
    &lt;div class=&quot;d-flex flex-column flex-grow-1 justify-content-center&quot;&gt;Content&lt;/div&gt;
    &lt;footer class=&quot;mt-auto&quot;&gt;Footer&lt;/footer&gt;

  &lt;/div&gt;
&lt;/body&gt;
</code></pre>
<p><a href=""https://i.sstatic.net/P9o0fm.png"" rel=""noreferrer""><img src=""https://i.sstatic.net/P9o0fm.png"" alt=""![enter image description here"" /></a></p>
"
"90178","2020-04-14 21:12:21","17","<p>This is my own minimal version of Pebbl's solution. Took forever to find the trick to get it to work in IE11. (Also tested in Chrome, Firefox, Edge, and Safari.)</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>html {
  height: 100%;
}

body {
  height: 100%;
  margin: 0;
}

section {
  display: flex;
  flex-direction: column;
  height: 100%;
}

div:first-child {
  background: gold;
}

div:last-child {
  background: plum;
  flex-grow: 1;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;body&gt;
  &lt;section&gt;
    &lt;div&gt;FIT&lt;/div&gt;
    &lt;div&gt;GROW&lt;/div&gt;
  &lt;/section&gt;
&lt;/body&gt;</code></pre>
</div>
</div>
</p>
"
"90178","2020-10-15 14:58:47","4","<p>One more solution using <a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout"" rel=""nofollow noreferrer"">CSS Grid</a></p>
<p>Define grid</p>
<pre><code>.root {
  display: grid;
  grid-template-rows: minmax(60px, auto) minmax(0, 100%);
}
</code></pre>
<p>First row(header): Min height can be set-up and max height will depend on content.
Second row(content) will try to fit free space that left after header.</p>
<p>The advantage of this approach is content can be scrolled independently of header, so header is always at the top of the page</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>body, html {
  margin: 0;
  height: 100%;
}

.root {
  display: grid;
  grid-template-rows: minmax(60px, auto) minmax(0, 100%);
  height: 100%;
}

.header {
  background-color: lightblue;
}

button {
  background-color: darkslateblue;
  color: white;
  padding: 10px 50px;
  margin: 10px 30px;
  border-radius: 15px;
  border: none;
}

.content {
  background-color: antiquewhite;
  overflow: auto;
}

.block {
  width: calc(100% - 20px);
  height: 120px;
  border: solid aquamarine;
  margin: 10px;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div class=""root""&gt;
  &lt;div class=""header""&gt;
    &lt;button&gt;click&lt;/button&gt;
    &lt;button&gt;click&lt;/button&gt;
    &lt;button&gt;click&lt;/button&gt;
    &lt;button&gt;click&lt;/button&gt;
    &lt;button&gt;click&lt;/button&gt;
  &lt;/div&gt;
  &lt;div class=""content""&gt;
    &lt;div class=""block""&gt;&lt;/div&gt;
    &lt;div class=""block""&gt;&lt;/div&gt;
    &lt;div class=""block""&gt;&lt;/div&gt;
    &lt;div class=""block""&gt;&lt;/div&gt;
    &lt;div class=""block""&gt;&lt;/div&gt;
    &lt;div class=""block""&gt;&lt;/div&gt;
    &lt;div class=""block""&gt;&lt;/div&gt;
    &lt;div class=""block""&gt;&lt;/div&gt;
&lt;/div&gt;
  &lt;div class=""footer""&gt;&lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
"
"90178","2021-03-03 23:56:21","-3","<p>All you have to do if you're using display: flex on the parent div is to simply set height to stretch or fill like so</p>
<pre><code>.divName {
    height: stretch
}
</code></pre>
"
"90178","2021-03-08 05:03:38","4","<p>Here is an answer that uses grids.</p>
<pre class=""lang-css prettyprint-override""><code>.the-container-div {
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: auto min-content;
  height: 100vh;
}
.view-to-remain-small {
  grid-row: 2;
}

.view-to-be-stretched {
  grid-row: 1
}
</code></pre>
"
"90178","2021-11-11 00:47:12","0","<p>Some of my components were loaded dynamically, and this caused me problems with setting the height of the navigation bar.</p>
<p>What I did was to use <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Resize_Observer_API"" rel=""nofollow noreferrer"">the ResizeObserver API</a>.</p>
<pre><code>function observeMainResize(){
   const resizeObserver = new ResizeObserver(entries =&gt; {
      for (let entry of entries) {
         $(&quot;nav&quot;).height(Math.max($(&quot;main&quot;).height(),
                                  $(&quot;nav&quot;) .height()));
      }
   });
   resizeObserver.observe(document.querySelector('main'));
}
</code></pre>
<p>then:</p>
<pre><code>...
&lt;body onload=&quot;observeMainResize()&quot;&gt;
   &lt;nav&gt;...&lt;/nav&gt;
   &lt;main&gt;...&lt;/main&gt;
...
</code></pre>
"
"90178","2022-02-21 08:49:46","3","<p>A nice hack would be to set the css margin property to &quot;auto&quot;.
It will make the div take up all the remaining height &amp; width .</p>
<p>The downside is that it would be computed as margin and not the content .</p>
<p>See attached screenshots:</p>
<p><a href=""https://i.sstatic.net/jLDC2.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/jLDC2.png"" alt=""before1"" /></a>
<a href=""https://i.sstatic.net/hoFa7.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/hoFa7.png"" alt=""before2"" /></a></p>
<p><a href=""https://i.sstatic.net/SulwP.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/SulwP.png"" alt=""after1"" /></a></p>
<p><a href=""https://i.sstatic.net/tw7n7.png"" rel=""nofollow noreferrer""><img src=""https://i.sstatic.net/tw7n7.png"" alt=""after2"" /></a></p>
"
"90178","2022-10-25 15:55:20","-4","<p>height: calc(100% - 650px);
position: absolute;</p>
"
"90178","2022-11-03 14:00:36","4","<p>For me the easiest way to do this is by using Grid. But, I am looking for an easier approach. Here is How I am doing it and it works. But, it becomes too much of pain if we have a lot of nested divs.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div style={{ display:grid, gridTemplateRows: 'max-content 1fr', }}&gt;
  &lt;div&gt;
    Header
  &lt;/div&gt;
  &lt;div style={{height: '100%',minHeight: '0'}}&gt;
    Content
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
"
"90178","2023-01-15 02:03:30","1","<p>My method makes use of <code>calc()</code> function in CSS. It calculates the space remaining when an item of known size is on the page.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>#fixed-size {
  height: 2rem;
  background-color: red;
}

#fill-remaining {
  background-color: blue;
  height: calc(100vh - 2rem);
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div&gt;
  &lt;div id=""fixed-size""&gt;Known Size&lt;/div&gt;
  &lt;div id=""fill-remaining""&gt;Fill Remaining&lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
"
"90178","2023-02-12 23:06:54","14","<p>Try this way:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.container {
  height: 100vh;
  display: flex;
  flex-direction: column;
}

.first-div {
  height: 20vh; // this height can be any length
}

.second-div {
  flex: 1; // fills up the remaining space on the screen
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div class='container'&gt;
  &lt;div class='first-div'&gt;
    ...
  &lt;/div&gt;
  &lt;div class='second-div'&gt;
    ...
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
"
"90178","2023-02-25 18:18:58","-4","<p>After calculating the pixels of your content, you can try to find it by subtracting it from 100vh under another label.##</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.header {
  height: 100px;
  /* set the height of the header */
  background-color: #ccc;
}

.content {
  height: calc(100vh - 100px);
  /* calculate the height of the content */
  background-color: #eee;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div class=""header""&gt;Header content&lt;/div&gt;
&lt;div class=""content""&gt;Content goes here&lt;/div&gt;</code></pre>
</div>
</div>
</p>
<h2></h2>
"
"90178","2024-01-07 23:18:58","-1","<p>max-height: -webkit-fill-available;</p>
<p>that's it. all you need.</p>
<p>On Safari you may notice that the height being incorrect when you have height of 100vh because the toolbar messes with the browser height. More information and other techniques to solve this can be found in this article <a href=""https://lukechannings.com/blog/2021-06-09-does-safari-15-fix-the-vh-bug/"" rel=""nofollow noreferrer"">https://lukechannings.com/blog/2021-06-09-does-safari-15-fix-the-vh-bug/</a></p>
"