PostId,CreationDate,Score,Text
"90178","2014-01-20 02:23:12","51","For anyone stumbling here in the future, you can get the desired table layout in most browsers, without the table mark-up, by using `display:table` and related properties, see [this answer](http://stackoverflow.com/a/21225247/3128209) to a very similar question."
"90178","2014-04-14 12:12:05","4","I've tried to recereate your setup - http://jsfiddle.net/ceELs/ - but its not working, what am I missed?"
"90178","2014-06-20 03:30:51","7","@Mr. Alien's answer is simple and useful, check it out [http://stackoverflow.com/a/23323175/188784](http://stackoverflow.com/a/23323175/188784)"
"90178","2014-07-01 20:00:04","5","Actually, what you describe does not work, even with tables: if the content takes more vertical space than the screen height, the table cell and the whole table will expand beyond the screen bottom. Your content's overflow:auto will not make a scrollbar appear."
"90178","2014-09-30 09:45:49","0","@GillBates it will work after you specify height of parent element look at http://jsfiddle.net/ceELs/5/"
"90178","2015-05-30 05:16:27","0","`.screenful: {height: 100vh}` is emerging, add `box-sizing: border-box;` to include padding."
"90178","2022-04-18 17:54:56","4","using grid in this day (>2020) would be better, grid-template-rows: auto 1fr <- will have your desired effect, also make the grid container have a min-height to fill the page 100vh."
"492994","2013-09-23 13:35:38","21","When it comes to DateTime and manipulation in JS, I look no further than [momentjs](http://momentjs.com/) :)"
"492994","2016-06-09 05:26:02","111","no need to use momentjs to compare 2 dates. Just use pure javascript's Date object. Check main answer for more details."
"492994","2016-11-03 10:46:51","0","You can refer following answer : http://stackoverflow.com/questions/4812152/calculating-date-in-javascript/40399250#40399250  Check getDateDifference and  getDifferenceInDays if it can help."
"492994","2017-05-29 20:07:32","0","I'll give you a reason to look further than Moment.js (_which I love, BUT..._): [Don't use for looping loads](https://github.com/moment/moment/issues/731)"
"492994","2017-10-02 16:25:52","0","For a **useful function** to get the time **difference separated into units** (seconds, minutes, hours, etc.), see the answer at https://stackoverflow.com/questions/1968167/difference-between-dates-in-javascript/1968175#1968175. That answer is now also available at https://stackoverflow.com/a/46529159/3787376."
"492994","2021-05-02 15:03:50","10","For those like me who may have come along later, moment.js is now in ""maintenance mode,"" *i.e.* no longer being actively developed."
"492994","2022-03-20 18:43:45","2","For those that have come along even later, moment.js is not only in maintenance mode, but it's a huge library (4.21mb!). If you only need simple functionality like comparing two dates, then you might try a tiny (20kb) lib I've been working on https://www.npmjs.com/package/easy-dates"
"500504","2010-11-23 21:21:05","56","I saw the recent question where someone said that to you, but they only meant for Arrays. It is considered bad practice for iterating through arrays but not necessarily for iterating through members of an object."
"500504","2011-06-22 15:06:04","22","Lots of answers with ""for"" loops such as 'for (var i=0; i<hColl.length; i++) {}' compare to 'var i=hColl.length; while (i--) {}' which, when it is possible to use the latter form it is substantially faster.  I know this is tangential but thought I would add this bit."
"500504","2012-10-10 11:28:04","3","@MarkSchultheiss but that's reverse iteration. Is there another version of forward iteration that's faster?"
"500504","2012-10-10 12:34:12","1","@MattDiPasquale - yes, it is reverse, however given a known limit, it allows optimum processing especially in older browsers by iteration over a known set vs an unknown set length by setting the limit first.  It is the nature of an interpreted language."
"500504","2013-03-13 23:48:10","0","@MarkSchultheiss Good comment. One could also write the `for` loop as `for (var i = hColl.length; i--;) {}`, which should have a similar performance profile as the reverse `while` loop."
"500504","2013-03-14 13:07:18","5","@Wynand use `var i = hCol1.length; for (i;i;i--;) {}` cache the i as it will make a difference, and simplify the test. - the older the browser, the more difference between `for` and `while` ALWAYS cache the ""i"" counter - and of course negative does not always fit the situation, and the negative while `obfuscate ` the code a bit for some people. and note `var i = 1000; for (i; i; i--) {}` and `var b =1000 for (b; b--;) {}` where i goes 1000 to 1 and b goes 999 to 0. - the older the browser, the more the while tends to favor for performance."
"500504","2013-07-17 17:02:50","12","You can also be clever.
`for(var i = 0, l = myArray.length; i < l; ++i) ...` is the fastest and best you can get with forward iteration."
"500504","2024-07-11 14:09:01","0","It's 10 years later now and I feel the urge to add: Even if these optimizations make the code slightly faster: they are micro-optimizations. If in doubt, go for readable code, not for a highly optimized loop over a 1000 element array. If something is slow, then it's usually the code that is executed *in* the loop, not the loop control structure."
"1149703","2012-01-31 18:45:09","8","Because jqno's answer actually uses the Throwable.getStackTrace() method that you specified in your question, whereas Brian doesn't. He uses Throwable.printStackTrace() instead."
"1149703","2013-08-15 21:32:45","10","Just about every Java project should include Apache commons-lang. It includes many convenience methods implementing extremely common development needs."
"1149703","2013-10-22 08:12:48","20","@StijndeWitt Those three lines of code almost certainly need factoring out of the place you've called them. Since you don't know where to put them, they'll go in your utility toolbox with all the other useful snippets. Bingo! you've just reinvented guava / commons-lang / whatever... only not so well. Import a sensible utilities library instead, and save reinventing the wheel. *The true sign of a novice is thinking you can do a better job than the library writers.*"
"1149703","2013-10-22 08:16:43","2","NB Single Level of Abstraction Principle is the reason this sort of thing should be factored out. Aids readability and testability, uncovers reusable elements. See: http://www.slideshare.net/guestebde/10-ways-to-improve-your-code-neal-ford"
"1149703","2014-03-10 10:52:44","9","1. Guava has - Throwables.getStackTraceAsString(e) 2. Apache Commons Lang - ExceptionUtils.getFullStackTrace 3. Write our own custom methods"
"1149703","2016-03-02 16:30:38","16","@AndrewSpencer I don't understand why you guys try so hard to bash StijndeWitt for wanting to achieve this with some small snippet. There is really not much danger in writing a tiny utility method (I don't see it as ""SHEER ARROGANCE oh nooooo!! he thinks he's better than Apache!!""). There are tons of projects especially in non-Java JVM languages that really don't want to include Guava or Commons Lang just to log a stacktrace. I write Scala & Clojure libraries and certainly will not be making Apache Commons Lang a transitive dependency just for one method."
"1149703","2016-04-07 13:56:11","1","@jm0 Not bashing, just qualified disagreement. It was a bit too snide, I was spoiling for a fight after seeing some bad homebrewed utilities. I agree there are reasons not to add a dependency, I just more often see the opposite mistake."
"1149703","2017-10-13 16:05:14","0","@Gewure We're so much more evolved and advanced now in our knowledge and understanding of the code. No need for such petty questions any longer. Let the commonfolk rot in their deficiencies."
"1149703","2017-10-16 22:09:24","1","I came here because when writing Amazon Lambda functions in Java you may want to avoid importing libraries, since they make the container startup time suck. So sometimes it's still necessary to reinvent the wheel. Or maybe I could solve this with ProGuard..."
"1149703","2017-12-05 15:06:17","0","@Andrew i don't know wether i interpret your sarcasm? correctly, but i think you didn't interprete me correctly either: I wanted to say, that SO has a Problem. Indeed it has turned elitist. It completely fails to open a connection for newbies to enter. 
E.g. they didn't want a non-english SO. Which is undemocratic and elitist. There are ppl who can program/want to but don't speak proper english."
"1149703","2017-12-06 04:55:47","1","@Gewure It would have helped if you didn't delete your comment... It was obviously sarcasm though. S.O. has always been full of elitists and close-minded snobs. It's not really S.O.'s fault, I don't think, but just a general flaw with mankind that gets put on display very prominently here. As for English speaking: there is some sensibility to both sides; I can only speak to the argument itself though."
"1149703","2017-12-26 14:53:10","3","Use commons-lang. Josh Bloch says: *""Know and use the libraries.[...] don’t reinvent the wheel.If you need to do something that seems like it should be reasonably common,there may already be a class in the libraries that does what you want. If there is, use it; if you don’t know, check.[...]Library code is likely to be better than code that you’d write yourself and is likely to improve over time.This is no reflection on your abilities as a programmer.Economies of scale dictate that library code receives far more attention than most developers could afford to devote to the same functionality.""*"
"2709821","2010-04-25 20:35:06","132","You may find interesting this essay ""Why explicit self has to stay"" by Guido van Rossum: http://neopythonic.blogspot.com/2008/10/why-explicit-self-has-to-stay.html"
"2709821","2010-04-25 20:38:38","15","See also ""Why must 'self' be used explicitly in method definitions and calls"": http://docs.python.org/faq/design.html#why-must-self-be-used-explicitly-in-method-definitions-and-calls"
"2709821","2010-04-28 00:12:06","39","""Which i understand, quite easily"" ---

Quite subjective, don't you think? What makes `@name` more intuitive than `self.name`? The latter, IMO, is more intuitive."
"2709821","2010-04-28 00:29:54","3","Although to play devils advocate its very easy to forget to add an additional argument to each method and have bizarre behavior when you forget which makes it hard for beginners. IMHO I rather be specific about unusual things like static methods then normal behavior like instance methods."
"2709821","2010-04-28 14:44:32","2","@santa, it wasnt so much the @name and self.name that i didnt get, it was why every function needed an extra argument. Problem solved now though."
"2709821","2010-11-11 10:07:11","0","Except for the Ruby comparison, this is the same ground as [ *How to avoid explicit 'self'?* ](http://stackoverflow.com/q/1984121)  (Because of that difference, I wouldn't close as a dupe, but anyone interested should definitely read both sets of answers.)"
"2709821","2010-11-22 21:25:51","1","@Piotr - I assume you disable the garbage collector?  It's better to explicitly manage memory than to have some garbage collector going around implicitly freeing memory all the time."
"2709821","2012-01-17 06:59:47","18","That's the key difference between a function and a class method. A function is floating free, unencumbered. A class (instance) method has to be aware of it's parent (and parent properties) so you need to pass the method a reference to the parent class (as **self**). It's just one less implicit rule that you have to internalize before understanding OOP. Other languages choose syntactic sugar over semantic simplicity, python isn't other languages."
"2709821","2012-06-19 16:34:45","3","@CatPlusPlus ""explicit is better than implicit"" is rule 2 of the Zen of Python; rule 1 is ""beautiful is better than ugly"" which argues for omitting self."
"2709821","2012-06-19 16:55:10","0","@I.J.Kennedy: Not really, no. Sigils or implicit scopes are way more ugly. Not that implicitness with no sigil would work, anyway, in the presence of class attributes and no static verification."
"2709821","2013-08-16 17:09:03","2","Well, you never 'pass', `self`. You would call the method like `getUserType()`. If you needed another parameter, yes, you would need to define the method to take another parameter."
"2709821","2013-09-22 23:37:42","3","Yuck, self.  Why doesn't the compiler just handle it and make self a keyword?  It's not that bad since it's already in many programming languages as 'this' or something similar.  In all my experience, too much of something is bad for you.  Too much candy, too much water, and too many explicit calls.  Explicit is only > Implicit when explicit is more handy.  If we're going to make self explicit, why not make the entire language explicit and have the users write and compile it themselves?"
"2709821","2022-09-05 07:08:37","0","See also: [TypeError: Missing 1 required positional argument: 'self'](/q/17534345/)."
"3106452","2024-05-16 15:43:49","0","When a TCP connection is established on a listening port, the server chooses a different port to the listening  port and the client sends subsequent traffic to that newly allocated number. Session variables are associated with this connection port."
"5844672","2011-05-01 01:26:48","14","Why do you need a function that returns a dictionary, when you can just modify the dictionary directly?"
"5844672","2016-07-01 23:51:58","10","The [dictionary `pop` method](https://docs.python.org/2/library/stdtypes.html#dict.pop) changes the dictionary _in-place_. Therefore it alters the _reference_ to the dictionary that was passed from the caller to the ""helper function"". So the ""helper function"" doesn't need to return anything, since the original reference to the dictionary in the caller will already be altered. Don't assign the return from `dict.pop()` to anything if you don't need it. EG: `do stuff with my_dict; my_dict.pop(my_key, None); do more stuff with my_dict # now doesn't have my_key`. Use `deepcopy(my_dict)` if needed."
"5844672","2018-05-14 22:59:15","1","Since the original title disagreed with the details and specifically excluded the obvious solution `d.pop()`, I fixed the title to ask the question specified in the details."
"5844672","2018-05-15 01:13:37","1","We should add a caveat asking if you **really** want to do this, as if you do it N times on a dictionary with E elements you'll leak(/use) O(N*E) memory with all the deep copies. If you merely want a read-only (shallow copy), do `d.pop(key)`. But if anything ever modifies the shallow copy, you have a [well-known problem with aliasing](https://stackoverflow.com/questions/2465921/how-to-copy-a-dictionary-and-only-edit-the-copy). It helps if you tell us the wider context. (Is anything else ever modifying the dict values? Are you trying to destructively iterate over a list? if not, what?)"
"5844672","2019-01-07 04:39:46","11","""Why do you need a function that returns a dictionary, when you can just modify the dictionary directly?""
Perhaps because you want to write pure functions that *don't* modify their parameters?"
"9483757","2014-11-09 17:10:06","18","Even after I use q+Enter to quit, the <END> reappears every time I begin typing again. It eats up my first character. Thereafter, I'm able to type the command I want. However, I'd rather not have this behavior at all. I'm on Windows. Suggestions?"
"9483757","2016-11-25 17:31:34","17","Windows users: you must type q+enter first.  Once you escape with cntl+c, you'll be stuck in that weird loop.  Use ONLY q+enter to exit."
"9483757","2017-03-14 10:36:03","2","It's possible to break out by repeatedly typing q+enter+q+enter+q+enter until the end of time no matter what the console shows."
"9483757","2019-01-24 02:03:33","0","I fixed it by using another console, typing ""ps"" to find all the processes, then typing ""kill -9 <PID for the less command>"" to kill less.  Nothing else worked."
"9483757","2019-09-17 12:05:41","0","just press ( :qa ) without parentheses and hit Enter, it will exit."
"9483757","2021-07-23 05:19:30","0","@KodiakMx brought me here too but its seven years after ptkvsk and 43 other users agreed with him"
"9483757","2023-08-30 18:49:29","0","Usually you just curse and then close the window, the answers below provide better options though"
"9483757","2024-08-23 05:28:54","0","If you did press `CTRL` + `C` on Windows, you have to use `SHIFT` + `Q` to exit."
"10123953","2019-08-17 09:06:17","0","If you use Date constructor, check this first https://stackoverflow.com/questions/5619202/converting-a-string-to-a-date-in-javascript"
"10123953","2019-10-21 20:28:35","2","the quickest way is to use the isomorphic [sort-array](https://github.com/75lb/sort-array) module which works natively in both browser and node, supporting any type of input, computed fields and custom sort orders."
"10123953","2021-11-18 16:15:49","3","It seems like this question hasn't been answered. None of the answers below explain how to "" order from the date closest to the current date""."
"10123953","2022-10-08 12:28:08","0","not directly related, but if someone is trying to sort data fetched from a DB, this should be done in the SQL query."
"10123953","2023-06-26 14:05:09","0","@Fed No it shouldn't. That depends entirely on the situation. There are plenty of situations where sorting on the client makes sense even if this particular piece of data comes from a database."